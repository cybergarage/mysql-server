SET @old_cte_max_recursion_depth=@@cte_max_recursion_depth;
SET SESSION cte_max_recursion_depth=110000;
CREATE VIEW num_1e5 AS
WITH RECURSIVE qn(n) AS (SELECT 0 UNION ALL SELECT n+1 FROM qn WHERE n<1e5)
SELECT n FROM qn;
CREATE TABLE t1(
pk INT NOT NULL PRIMARY KEY,
a INT NOT NULL,
b INT NOT NULL,
fill VARCHAR(500) NOT NULL,
KEY k1(a)
) ENGINE=InnoDB, CHARSET=latin1;
INSERT INTO t1
SELECT n, FLOOR(RAND(0)*1e5), FLOOR(RAND(1)*1e5), REPEAT('A',500) FROM num_1e5;
SET SESSION cte_max_recursion_depth= @old_cte_max_recursion_depth;
DROP VIEW num_1e5;
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SELECT @@innodb_buffer_pool_size=24*1024*1024;
@@innodb_buffer_pool_size=24*1024*1024
1
EXPLAIN FORMAT=TREE SELECT b FROM t1 WHERE a<10;
EXPLAIN
-> Index range scan on t1 using k1 over (a < 10)  (...)

EXPLAIN FORMAT=TREE SELECT b FROM t1 WHERE a<1000;
EXPLAIN
-> Index range scan (Multi-Range Read) on t1 using k1 over (a < 1000)  (...)

EXPLAIN FORMAT=TREE SELECT b FROM t1 WHERE a<3000;
EXPLAIN
-> Filter: (t1.a < 3000)  (...)
    -> Table scan on t1  (...)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1, t1 x2 WHERE x1.pk<10 AND x1.b=x2.a;
EXPLAIN
-> Nested loop inner join  (...)
    -> Index range scan on x1 using PRIMARY over (pk < 10)  (...)
    -> Index lookup on x2 using k1 (a = x1.b)  (...)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1, t1 x2 WHERE x1.pk<1000 AND x1.b=x2.a;
EXPLAIN
-> Inner hash join (x1.b = x2.a)  (...)
    -> Table scan on x2  (...)
    -> Hash
        -> Index range scan on x1 using PRIMARY over (pk < 1000)  (...)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1, t1 x2 WHERE x1.pk<3000 AND x1.b=x2.a;
EXPLAIN
-> Inner hash join (x1.b = x2.a)  (...)
    -> Table scan on x2  (...)
    -> Hash
        -> Index range scan on x1 using PRIMARY over (pk < 3000)  (...)

DROP TABLE t1;
