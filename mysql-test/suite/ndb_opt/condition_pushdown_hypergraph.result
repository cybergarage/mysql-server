set explain_format=tree;
CREATE TABLE t1 (
auto int(5) unsigned NOT NULL auto_increment,
string char(10),
vstring varchar(10),
bin binary(2),
vbin varbinary(7),
tiny tinyint(4) DEFAULT '0' NOT NULL ,
short smallint(6) DEFAULT '1' NOT NULL ,
medium mediumint(8) DEFAULT '0' NOT NULL,
long_int int(11) DEFAULT '0' NOT NULL,
longlong bigint(13) DEFAULT '0' NOT NULL,
real_float float(13,1) DEFAULT 0.0 NOT NULL,
real_double double(16,4),
real_decimal decimal(16,4),
utiny tinyint(3) unsigned DEFAULT '0' NOT NULL,
ushort smallint(5) unsigned zerofill DEFAULT '00000' NOT NULL,
umedium mediumint(8) unsigned DEFAULT '0' NOT NULL,
ulong int(11) unsigned DEFAULT '0' NOT NULL,
ulonglong bigint(13) unsigned DEFAULT '0' NOT NULL,
bits bit(3),
options enum('zero','one','two','three','four') not null,
flags set('zero','one','two','three','four') not null,
date_field date,
year_field year,
time_field time,
date_time datetime,
time_stamp timestamp,
PRIMARY KEY (auto)
) engine=ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	The ZEROFILL attribute is deprecated and will be removed in a future release. Use the LPAD function to zero-pad numbers, or store the formatted numbers in a CHAR column.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
insert into t1 values
(NULL,"aaaa","aaaa",0xAAAA,0xAAAA,-1,-1,-1,-1,-1,1.1,1.1,1.1,1,1,1,1,1,
b'001','one','one',
'1901-01-01','1901',
'01:01:01','1901-01-01 01:01:01',NULL),
(NULL,"bbbb","bbbb",0xBBBB,0xBBBB,-2,-2,-2,-2,-2,2.2,2.2,2.2,2,2,2,2,2,
b'010','two','one,two',
'1902-02-02','1902',
'02:02:02','1902-02-02 02:02:02',NULL),
(NULL,"cccc","cccc",0xCCCC,0xCCCC,-3,-3,-3,-3,-3,3.3,3.3,3.3,3,3,3,3,3,
b'011','three','one,two,three',
'1903-03-03','1903',
'03:03:03','1903-03-03 03:03:03',NULL),
(NULL,"dddd","dddd",0xDDDD,0xDDDD,-4,-4,-4,-4,-4,4.4,4.4,4.4,4,4,4,4,4,
b'100','four','one,two,three,four',
'1904-04-04','1904',
'04:04:04','1904-04-04 04:04:04',NULL);
CREATE TABLE t2 (pk1 int unsigned NOT NULL PRIMARY KEY,   attr1 int unsigned NOT NULL,   attr2 int unsigned,   attr3 VARCHAR(10) )
ENGINE=ndbcluster
COMMENT="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t2 values (0,0,0, "a"),(1,1,1,"b"),(2,2,NULL,NULL),(3,3,3,"d"),(4,4,4,"e"),(5,5,5,"f");
CREATE TABLE  t3 (pk1 int unsigned NOT NULL PRIMARY KEY,   attr1 int unsigned NOT NULL,   attr2 bigint unsigned, attr3 tinyint unsigned,  attr4 VARCHAR(10) )
ENGINE=ndbcluster
COMMENT="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t3 values (0,0,0,0,"a"),(1,1,9223372036854775803,1,"b"),(2,2,9223372036854775804,2,"c"),(3,3,9223372036854775805,3,"d"),(4,4,9223372036854775806,4,"e"),(5,5,9223372036854775807,5,"f");
CREATE TABLE  t4 (pk1 int unsigned NOT NULL PRIMARY KEY,   attr1 int unsigned NOT NULL,   attr2 bigint unsigned, attr3 tinyint unsigned,  attr4 VARCHAR(10) , KEY (attr1)) ENGINE=ndbcluster
COMMENT="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t4 values (0,0,0,0,"a"),(1,1,9223372036854775803,1,"b"),(2,2,9223372036854775804,2,"c"),(3,3,9223372036854775805,3,"d"),(4,4,9223372036854775806,4,"e"),(5,5,9223372036854775807,5,"f");
set @old_ecpd = @@session.optimizer_switch;
set @@optimizer_switch = 'engine_condition_pushdown=off';
select auto from t1 where
string = "aaaa" and
vstring = "aaaa" and
bin = 0xAAAA and
vbin = 0xAAAA and
tiny = -1 and
short = -1 and
medium = -1 and
long_int = -1 and
longlong = -1 and
real_float > 1.0 and real_float < 2.0 and
real_double > 1.0 and real_double < 2.0 and
real_decimal > 1.0 and real_decimal < 2.0 and
utiny = 1 and
ushort = 1 and
umedium = 1 and
ulong = 1 and
ulonglong = 1 and
bits = b'001' and
options = 'one' and
flags = 'one' and
date_field = '1901-01-01' and
year_field = '1901' and
time_field = '01:01:01' and
date_time = '1901-01-01 01:01:01'
order by auto;
auto
1
select auto from t1 where
string != "aaaa" and
vstring != "aaaa" and
bin != 0xAAAA and
vbin != 0xAAAA and
tiny != -1 and
short != -1 and
medium != -1 and
long_int != -1 and
longlong != -1 and
(real_float < 1.0 or real_float > 2.0) and
(real_double < 1.0 or real_double > 2.0) and
(real_decimal < 1.0 or real_decimal > 2.0) and
utiny != 1 and
ushort != 1 and
umedium != 1 and
ulong != 1 and
ulonglong != 1 and
bits != b'001' and
options != 'one' and
flags != 'one' and
date_field != '1901-01-01' and
year_field != '1901' and
time_field != '01:01:01' and
date_time != '1901-01-01 01:01:01'
order by auto;
auto
2
3
4
select auto from t1 where
string > "aaaa" and
vstring > "aaaa" and
bin > 0xAAAA and
vbin > 0xAAAA and
tiny < -1 and
short < -1 and
medium < -1 and
long_int < -1 and
longlong < -1 and
real_float > 1.1 and
real_double > 1.1 and
real_decimal > 1.1 and
utiny > 1 and
ushort > 1 and
umedium > 1 and
ulong > 1 and
ulonglong > 1 and
bits > b'001' and
(options = 'two' or options = 'three' or options = 'four') and
(flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field > '1901-01-01' and
year_field > '1901' and
time_field > '01:01:01' and
date_time > '1901-01-01 01:01:01'
order by auto;
auto
2
3
4
select auto from t1 where
string >= "aaaa" and
vstring >= "aaaa" and
bin >= 0xAAAA and
vbin >= 0xAAAA and
tiny <= -1 and
short <= -1 and
medium <= -1 and
long_int <= -1 and
longlong <= -1 and
real_float >= 1.0 and
real_double >= 1.0 and
real_decimal >= 1.0 and
utiny >= 1 and
ushort >= 1 and
umedium >= 1 and
ulong >= 1 and
ulonglong >= 1 and
bits >= b'001' and
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field >= '1901-01-01' and
year_field >= '1901' and
time_field >= '01:01:01' and
date_time >= '1901-01-01 01:01:01'
order by auto;
auto
1
2
3
4
select auto from t1 where
string < "dddd" and
vstring < "dddd" and
bin < 0xDDDD and
vbin < 0xDDDD and
tiny > -4 and
short > -4 and
medium > -4 and
long_int > -4 and
longlong > -4 and
real_float < 4.4 and
real_double < 4.4 and
real_decimal < 4.4 and
utiny < 4 and
ushort < 4 and
umedium < 4 and
ulong < 4 and
ulonglong < 4 and
bits < b'100' and
(options = 'one' or options = 'two' or options = 'three') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three') and
date_field < '1904-01-01' and
year_field < '1904' and
time_field < '04:04:04' and
date_time < '1904-04-04 04:04:04'
order by auto;
auto
1
2
3
select auto from t1 where
string <= "dddd" and
vstring <= "dddd" and
bin <= 0xDDDD and
vbin <= 0xDDDD and
tiny >= -4 and
short >= -4 and
medium >= -4 and
long_int >= -4 and
longlong >= -4 and
real_float <= 4.5 and
real_double <= 4.5 and
real_decimal <= 4.5 and
utiny <= 4 and
ushort <= 4 and
umedium <= 4 and
ulong <= 4 and
ulonglong <= 4 and
bits <= b'100' and
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field <= '1904-04-04' and
year_field <= '1904' and
time_field <= '04:04:04' and
date_time <= '1904-04-04 04:04:04'
order by auto;
auto
1
2
3
4
select auto from t1 where
string like "b%" and
vstring like "b%" and
bin like concat(0xBB, '%') and
vbin like concat(0xBB, '%')
order by auto;
auto
2
select auto from t1 where
string not like "b%" and
vstring not like "b%" and
bin not like concat(0xBB, '%') and
vbin not like concat(0xBB, '%')
order by auto;
auto
1
3
4
select auto from t1 where
(string between "aaaa" and "cccc") and
(vstring between "aaaa" and "cccc") and
(bin between 0xAAAA and 0xCCCC) and
(vbin between 0xAAAA and 0xCCCC) and
(tiny between -3 and -1) and
(short between -3 and -1) and
(medium between -3 and -1) and
(long_int between -3 and -1) and
(longlong between -3 and -1) and
(utiny between 1 and 3) and
(ushort between 1 and 3) and
(umedium between 1 and 3) and
(ulong between 1 and 3) and
(ulonglong between 1 and 3) and
(bits between b'001' and b'011') and
(options between 'one' and 'three') and
(flags between 'one' and 'one,two,three') and
(date_field between '1901-01-01' and '1903-03-03') and
(year_field between '1901' and '1903') and
(time_field between '01:01:01' and '03:03:03') and
(date_time between '1901-01-01 01:01:01' and '1903-03-03 03:03:03')
order by auto;
auto
1
3
select auto from t1 where
("aaaa" between string and string) and
("aaaa" between vstring and vstring) and
(0xAAAA between bin and bin) and
(0xAAAA between vbin and vbin) and
(-1 between tiny and tiny) and
(-1 between short and short) and
(-1 between medium and medium) and
(-1 between long_int and long_int) and
(-1 between longlong and longlong) and
(1 between utiny and utiny) and
(1 between ushort and ushort) and
(1 between umedium and umedium) and
(1 between ulong and ulong) and
(1 between ulonglong and ulonglong) and
(b'001' between bits and bits) and
('one' between options and options) and
('one' between flags and flags) and
('1901-01-01' between date_field and date_field) and
('1901' between year_field and year_field) and
('01:01:01' between time_field and time_field) and
('1901-01-01 01:01:01' between date_time and date_time)
order by auto;
auto
1
select auto from t1 where
(string not between "aaaa" and "cccc") and
(vstring not between "aaaa" and "cccc") and
(bin not between 0xAAAA and 0xCCCC) and
(vbin not between 0xAAAA and 0xCCCC) and
(tiny not between -3 and -1) and
(short not between -3 and -1) and
(medium not between -3 and -1) and
(long_int not between -3 and -1) and
(longlong not between -3 and -1) and
(utiny not between 1 and 3) and
(ushort not between 1 and 3) and
(umedium not between 1 and 3) and
(ulong not between 1 and 3) and
(ulonglong not between 1 and 3) and
(bits not between b'001' and b'011') and
(options not between 'one' and 'three') and
(flags not between 'one' and 'one,two,three') and
(date_field not between '1901-01-01' and '1903-03-03') and
(year_field not between '1901' and '1903') and
(time_field not between '01:01:01' and '03:03:03') and
(date_time not between '1901-01-01 01:01:01' and '1903-03-03 03:03:03')
order by auto;
auto
4
select auto from t1 where
("aaaa" not between string and string) and
("aaaa" not between vstring and vstring) and
(0xAAAA not between bin and bin) and
(0xAAAA not between vbin and vbin) and
(-1 not between tiny and tiny) and
(-1 not between short and short) and
(-1 not between medium and medium) and
(-1 not between long_int and long_int) and
(-1 not between longlong and longlong) and
(1 not between utiny and utiny) and
(1 not between ushort and ushort) and
(1 not between umedium and umedium) and
(1 not between ulong and ulong) and
(1 not between ulonglong and ulonglong) and
(b'001' not between bits and bits) and
('one' not between options and options) and
('one' not between flags and flags) and
('1901-01-01' not between date_field and date_field) and
('1901' not between year_field and year_field) and
('01:01:01' not between time_field and time_field) and
('1901-01-01 01:01:01' not between date_time and date_time)
order by auto;
auto
2
3
4
select auto from t1 where
string in("aaaa","cccc") and
vstring in("aaaa","cccc") and
bin in(0xAAAA,0xCCCC) and
vbin in(0xAAAA,0xCCCC) and
tiny in(-1,-3) and
short in(-1,-3) and
medium in(-1,-3) and
long_int in(-1,-3) and
longlong in(-1,-3) and
utiny in(1,3) and
ushort in(1,3) and
umedium in(1,3) and
ulong in(1,3) and
ulonglong in(1,3) and
bits in(b'001',b'011') and
options in('one','three') and
flags in('one','one,two,three') and
date_field in('1901-01-01','1903-03-03') and
year_field in('1901','1903') and
time_field in('01:01:01','03:03:03') and
date_time in('1901-01-01 01:01:01','1903-03-03 03:03:03')
order by auto;
auto
1
3
select auto from t1 where
"aaaa" in(string) and
"aaaa" in(vstring) and
0xAAAA in(bin) and
0xAAAA in(vbin) and
(-1 in(tiny)) and
(-1 in(short)) and
(-1 in(medium)) and
(-1 in(long_int)) and
(-1 in(longlong)) and
1 in(utiny) and
1 in(ushort) and
1 in(umedium) and
1 in(ulong) and
1 in(ulonglong) and
b'001' in(bits) and
'one' in(options) and
'one' in(flags) and
'1901-01-01' in(date_field) and
'1901' in(year_field) and
'01:01:01' in(time_field) and
'1901-01-01 01:01:01' in(date_time)
order by auto;
auto
1
select auto from t1 where
string not in("aaaa","cccc") and
vstring not in("aaaa","cccc") and
bin not in(0xAAAA,0xCCCC) and
vbin not in(0xAAAA,0xCCCC) and
tiny not in(-1,-3) and
short not in(-1,-3) and
medium not in(-1,-3) and
long_int not in(-1,-3) and
longlong not in(-1,-3) and
utiny not in(1,3) and
ushort not in(1,3) and
umedium not in(1,3) and
ulong not in(1,3) and
ulonglong not in(1,3) and
bits not in(b'001',b'011') and
options not in('one','three') and
flags not in('one','one,two,three') and
date_field not in('1901-01-01','1903-03-03') and
year_field not in('1901','1903') and
time_field not in('01:01:01','03:03:03') and
date_time not in('1901-01-01 01:01:01','1903-03-03 03:03:03')
order by auto;
auto
2
4
select auto from t1 where
"aaaa" not in(string) and
"aaaa" not in(vstring) and
0xAAAA not in(bin) and
0xAAAA not in(vbin) and
(-1 not in(tiny)) and
(-1 not in(short)) and
(-1 not in(medium)) and
(-1 not in(long_int)) and
(-1 not in(longlong)) and
1 not in(utiny) and
1 not in(ushort) and
1 not in(umedium) and
1 not in(ulong) and
1 not in(ulonglong) and
b'001' not in(bits) and
'one' not in(options) and
'one' not in(flags) and
'1901-01-01' not in(date_field) and
'1901' not in(year_field) and
'01:01:01' not in(time_field) and
'1901-01-01 01:01:01' not in(date_time)
order by auto;
auto
2
3
4
select * from t2 where attr3 is null or attr1 > 2 and pk1= 3 order by pk1;
pk1	attr1	attr2	attr3
2	2	NULL	NULL
3	3	3	d
select * from t2 where attr3 is not null and attr1 > 2 order by pk1;
pk1	attr1	attr2	attr3
3	3	3	d
4	4	4	e
5	5	5	f
select * from t3 where attr2 >  9223372036854775803 and attr3 != 3 order by pk1;
pk1	attr1	attr2	attr3	attr4
2	2	9223372036854775804	2	c
4	4	9223372036854775806	4	e
5	5	9223372036854775807	5	f
select * from t2,t3 where t2.attr1 < 1 and t2.attr2 = t3.attr2 and t3.attr1 < 5 order by t2.pk1;
pk1	attr1	attr2	attr3	pk1	attr1	attr2	attr3	attr4
0	0	0	a	0	0	0	0	a
select * from t4 where attr1 < 5 and attr2 > 9223372036854775803 and attr3 != 3 order by t4.pk1;
pk1	attr1	attr2	attr3	attr4
2	2	9223372036854775804	2	c
4	4	9223372036854775806	4	e
select * from t3,t4 where t4.attr1 > 1 and t4.attr2 = t3.attr2 and t4.attr3 < 5 order by t4.pk1;
pk1	attr1	attr2	attr3	attr4	pk1	attr1	attr2	attr3	attr4
2	2	9223372036854775804	2	c	2	2	9223372036854775804	2	c
3	3	9223372036854775805	3	d	3	3	9223372036854775805	3	d
4	4	9223372036854775806	4	e	4	4	9223372036854775806	4	e
set @@optimizer_switch = 'engine_condition_pushdown=on';
explain
select auto from t1 where
string = "aaaa" and
vstring = "aaaa" and
bin = 0xAAAA and
vbin = 0xAAAA and
tiny = -1 and
short = -1 and
medium = -1 and
long_int = -1 and
longlong = -1 and
real_float > 1.0 and real_float < 2.0 and
real_double > 1.0 and real_double < 2.0 and
real_decimal > 1.0 and real_decimal < 2.0 and
utiny = 1 and
ushort = 1 and
umedium = 1 and
ulong = 1 and
ulonglong = 1 and
/* bits = b'001' and */
options = 'one' and
flags = 'one' and
date_field = '1901-01-01' and
year_field = '1901' and
time_field = '01:01:01' and
date_time = '1901-01-01 01:01:01'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0)
    -> Table scan on t1, with pushed condition: ((t1.time_field = TIME'01:01:01') and (t1.tiny = <cache>(-(1))) and (t1.short = <cache>(-(1))) and (t1.`medium` = <cache>(-(1))) and (t1.long_int = <cache>(-(1))) and (t1.longlong = -1) and (t1.utiny = 1) and (t1.ushort = 1) and (t1.umedium = 1) and (t1.ulong = 1) and (t1.ulonglong = 1) and (t1.date_field = DATE'1901-01-01') and (t1.year_field = 1901) and (t1.date_time = TIMESTAMP'1901-01-01 01:01:01') and (t1.real_float > 1) and (t1.real_float < 2) and (t1.real_double > 1) and (t1.real_double < 2) and (t1.real_decimal > 1.0000) and (t1.real_decimal < 2.0000) and (t1.`string` = 'aaaa') and (t1.vstring = 'aaaa') and (t1.bin = 0xaaaa) and (t1.vbin = 0xaaaa) and (t1.flags = 'one') and (t1.`options` = 'one'))  (rows=0)

select auto from t1 where
string = "aaaa" and
vstring = "aaaa" and
bin = 0xAAAA and
vbin = 0xAAAA and
tiny = -1 and
short = -1 and
medium = -1 and
long_int = -1 and
longlong = -1 and
real_float > 1.0 and real_float < 2.0 and
real_double > 1.0 and real_double < 2.0 and
real_decimal > 1.0 and real_decimal < 2.0 and
utiny = 1 and
ushort = 1 and
umedium = 1 and
ulong = 1 and
ulonglong = 1 and
/* bits = b'001' and */
options = 'one' and
flags = 'one' and
date_field = '1901-01-01' and
year_field = '1901' and
time_field = '01:01:01' and
date_time = '1901-01-01 01:01:01'
order by auto;
auto
1
explain
select auto from t1 where
string != "aaaa" and
vstring != "aaaa" and
bin != 0xAAAA and
vbin != 0xAAAA and
tiny != -1 and
short != -1 and
medium != -1 and
long_int != -1 and
longlong != -1 and
(real_float < 1.0 or real_float > 2.0) and
(real_double < 1.0 or real_double > 2.0) and
(real_decimal < 1.0 or real_decimal > 2.0) and
utiny != 1 and
ushort != 1 and
umedium != 1 and
ulong != 1 and
ulonglong != 1 and
/* bits != b'001' and */
options != 'one' and
flags != 'one' and
date_field != '1901-01-01' and
year_field != '1901' and
time_field != '01:01:01' and
date_time != '1901-01-01 01:01:01'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0.0741)
    -> Table scan on t1, with pushed condition: (((t1.real_float < 1) or (t1.real_float > 2)) and ((t1.real_double < 1) or (t1.real_double > 2)) and ((t1.real_decimal < 1.0000) or (t1.real_decimal > 2.0000)) and (t1.`options` <> 'one') and (t1.tiny <> <cache>(-(1))) and (t1.short <> <cache>(-(1))) and (t1.`medium` <> <cache>(-(1))) and (t1.long_int <> <cache>(-(1))) and (t1.longlong <> -1) and (t1.utiny <> 1) and (t1.ushort <> 1) and (t1.umedium <> 1) and (t1.ulong <> 1) and (t1.ulonglong <> 1) and (t1.date_field <> DATE'1901-01-01') and (t1.year_field <> 1901) and (t1.time_field <> TIME'01:01:01') and (t1.date_time <> TIMESTAMP'1901-01-01 01:01:01') and (t1.`string` <> 'aaaa') and (t1.vstring <> 'aaaa') and (t1.bin <> 0xaaaa) and (t1.vbin <> 0xaaaa) and (t1.flags <> 'one'))  (rows=0.0741)

select auto from t1 where
string != "aaaa" and
vstring != "aaaa" and
bin != 0xAAAA and
vbin != 0xAAAA and
tiny != -1 and
short != -1 and
medium != -1 and
long_int != -1 and
longlong != -1 and
(real_float < 1.0 or real_float > 2.0) and
(real_double < 1.0 or real_double > 2.0) and
(real_decimal < 1.0 or real_decimal > 2.0) and
utiny != 1 and
ushort != 1 and
umedium != 1 and
ulong != 1 and
ulonglong != 1 and
/* bits != b'001' and */
options != 'one' and
flags != 'one' and
date_field != '1901-01-01' and
year_field != '1901' and
time_field != '01:01:01' and
date_time != '1901-01-01 01:01:01'
order by auto;
auto
2
3
4
explain
select auto from t1 where
string > "aaaa" and
vstring > "aaaa" and
bin > 0xAAAA and
vbin > 0xAAAA and
tiny < -1 and
short < -1 and
medium < -1 and
long_int < -1 and
longlong < -1 and
real_float > 1.1 and
real_double > 1.1 and
real_decimal > 1.1 and
utiny > 1 and
ushort > 1 and
umedium > 1 and
ulong > 1 and
ulonglong > 1 and
/* bits > b'001' and */
(options = 'two' or options = 'three' or options = 'four') and
(flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field > '1901-01-01' and
year_field > '1901' and
time_field > '01:01:01' and
date_time > '1901-01-01 01:01:01'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=50.5e-12)
    -> Table scan on t1, with pushed condition: ((t1.tiny < <cache>(-(1))) and (t1.short < <cache>(-(1))) and (t1.`medium` < <cache>(-(1))) and (t1.long_int < <cache>(-(1))) and (t1.longlong < -1) and (t1.real_float > 1.100000023841858) and (t1.real_double > 1.1) and (t1.real_decimal > 1.1000) and (t1.utiny > 1) and (t1.ushort > 1) and (t1.umedium > 1) and (t1.ulong > 1) and (t1.ulonglong > 1) and (t1.date_field > DATE'1901-01-01') and (t1.year_field > 1901) and (t1.time_field > TIME'01:01:01') and (t1.date_time > TIMESTAMP'1901-01-01 01:01:01') and (t1.`string` > 'aaaa') and (t1.vstring > 'aaaa') and (t1.bin > 0xaaaa) and (t1.vbin > 0xaaaa) and ((t1.flags = 'one,two') or (t1.flags = 'one,two,three') or (t1.flags = 'one,two,three,four')) and ((t1.`options` = 'two') or (t1.`options` = 'three') or (t1.`options` = 'four')))  (rows=50.5e-12)

select auto from t1 where
string > "aaaa" and
vstring > "aaaa" and
bin > 0xAAAA and
vbin > 0xAAAA and
tiny < -1 and
short < -1 and
medium < -1 and
long_int < -1 and
longlong < -1 and
real_float > 1.1 and
real_double > 1.1 and
real_decimal > 1.1 and
utiny > 1 and
ushort > 1 and
umedium > 1 and
ulong > 1 and
ulonglong > 1 and
/* bits > b'001' and */
(options = 'two' or options = 'three' or options = 'four') and
(flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field > '1901-01-01' and
year_field > '1901' and
time_field > '01:01:01' and
date_time > '1901-01-01 01:01:01'
order by auto;
auto
2
3
4
explain
select auto from t1 where
string >= "aaaa" and
vstring >= "aaaa" and
bin >= 0xAAAA and
vbin >= 0xAAAA and
tiny <= -1 and
short <= -1 and
medium <= -1 and
long_int <= -1 and
longlong <= -1 and
real_float >= 1.0 and
real_double >= 1.0 and
real_decimal >= 1.0 and
utiny >= 1 and
ushort >= 1 and
umedium >= 1 and
ulong >= 1 and
ulonglong >= 1 and
/* bits >= b'001' and */
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field >= '1901-01-01' and
year_field >= '1901' and
time_field >= '01:01:01' and
date_time >= '1901-01-01 01:01:01'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=77.5e-12)
    -> Table scan on t1, with pushed condition: ((t1.tiny <= <cache>(-(1))) and (t1.short <= <cache>(-(1))) and (t1.`medium` <= <cache>(-(1))) and (t1.long_int <= <cache>(-(1))) and (t1.longlong <= -1) and (t1.real_float >= 1) and (t1.real_double >= 1) and (t1.real_decimal >= 1.0000) and (t1.utiny >= 1) and (t1.ushort >= 1) and (t1.umedium >= 1) and (t1.ulong >= 1) and (t1.ulonglong >= 1) and (t1.date_field >= DATE'1901-01-01') and (t1.year_field >= 1901) and (t1.time_field >= TIME'01:01:01') and (t1.date_time >= TIMESTAMP'1901-01-01 01:01:01') and (t1.`string` >= 'aaaa') and (t1.vstring >= 'aaaa') and (t1.bin >= 0xaaaa) and (t1.vbin >= 0xaaaa) and ((t1.flags = 'one') or (t1.flags = 'one,two') or (t1.flags = 'one,two,three') or (t1.flags = 'one,two,three,four')) and ((t1.`options` = 'one') or (t1.`options` = 'two') or (t1.`options` = 'three') or (t1.`options` = 'four')))  (rows=77.5e-12)

select auto from t1 where
string >= "aaaa" and
vstring >= "aaaa" and
bin >= 0xAAAA and
vbin >= 0xAAAA and
tiny <= -1 and
short <= -1 and
medium <= -1 and
long_int <= -1 and
longlong <= -1 and
real_float >= 1.0 and
real_double >= 1.0 and
real_decimal >= 1.0 and
utiny >= 1 and
ushort >= 1 and
umedium >= 1 and
ulong >= 1 and
ulonglong >= 1 and
/* bits >= b'001' and */
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field >= '1901-01-01' and
year_field >= '1901' and
time_field >= '01:01:01' and
date_time >= '1901-01-01 01:01:01'
order by auto;
auto
1
2
3
4
explain
select auto from t1 where
string < "dddd" and
vstring < "dddd" and
bin < 0xDDDD and
vbin < 0xDDDD and
tiny > -4 and
short > -4 and
medium > -4 and
long_int > -4 and
longlong > -4 and
real_float < 4.4 and
real_double < 4.4 and
real_decimal < 4.4 and
utiny < 4 and
ushort < 4 and
umedium < 4 and
ulong < 4 and
ulonglong < 4 and
/* bits < b'100' and */
(options = 'one' or options = 'two' or options = 'three') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three') and
date_field < '1904-01-01' and
year_field < '1904' and
time_field < '04:04:04' and
date_time < '1904-04-04 04:04:04'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=50.5e-12)
    -> Table scan on t1, with pushed condition: ((t1.tiny > <cache>(-(4))) and (t1.short > <cache>(-(4))) and (t1.`medium` > <cache>(-(4))) and (t1.long_int > <cache>(-(4))) and (t1.longlong > -4) and (t1.real_float < 4.400000095367432) and (t1.real_double < 4.4) and (t1.real_decimal < 4.4000) and (t1.utiny < 4) and (t1.ushort < 4) and (t1.umedium < 4) and (t1.ulong < 4) and (t1.ulonglong < 4) and (t1.date_field < DATE'1904-01-01') and (t1.year_field < 1904) and (t1.time_field < TIME'04:04:04') and (t1.date_time < TIMESTAMP'1904-04-04 04:04:04') and (t1.`string` < 'dddd') and (t1.vstring < 'dddd') and (t1.bin < 0xdddd) and (t1.vbin < 0xdddd) and ((t1.flags = 'one') or (t1.flags = 'one,two') or (t1.flags = 'one,two,three')) and ((t1.`options` = 'one') or (t1.`options` = 'two') or (t1.`options` = 'three')))  (rows=50.5e-12)

select auto from t1 where
string < "dddd" and
vstring < "dddd" and
bin < 0xDDDD and
vbin < 0xDDDD and
tiny > -4 and
short > -4 and
medium > -4 and
long_int > -4 and
longlong > -4 and
real_float < 4.4 and
real_double < 4.4 and
real_decimal < 4.4 and
utiny < 4 and
ushort < 4 and
umedium < 4 and
ulong < 4 and
ulonglong < 4 and
/* bits < b'100' and */
(options = 'one' or options = 'two' or options = 'three') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three') and
date_field < '1904-01-01' and
year_field < '1904' and
time_field < '04:04:04' and
date_time < '1904-04-04 04:04:04'
order by auto;
auto
1
2
3
explain
select auto from t1 where
string <= "dddd" and
vstring <= "dddd" and
bin <= 0xDDDD and
vbin <= 0xDDDD and
tiny >= -4 and
short >= -4 and
medium >= -4 and
long_int >= -4 and
longlong >= -4 and
real_float <= 4.5 and
real_double <= 4.5 and
real_decimal <= 4.5 and
utiny <= 4 - 1 + 1 and /* Checking function composition */
ushort <= 4 and
umedium <= 4 and
ulong <= 4 and
ulonglong <= 4 and
/* bits <= b'100' and */
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field <= '1904-04-04' and
year_field <= '1904' and
time_field <= '04:04:04' and
date_time <= '1904-04-04 04:04:04'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=77.5e-12)
    -> Table scan on t1, with pushed condition: ((t1.tiny >= <cache>(-(4))) and (t1.short >= <cache>(-(4))) and (t1.`medium` >= <cache>(-(4))) and (t1.long_int >= <cache>(-(4))) and (t1.longlong >= -4) and (t1.real_float <= 4.5) and (t1.real_double <= 4.5) and (t1.real_decimal <= 4.5000) and (t1.utiny <= <cache>(((4 - 1) + 1))) and (t1.ushort <= 4) and (t1.umedium <= 4) and (t1.ulong <= 4) and (t1.ulonglong <= 4) and (t1.date_field <= DATE'1904-04-04') and (t1.year_field <= 1904) and (t1.time_field <= TIME'04:04:04') and (t1.date_time <= TIMESTAMP'1904-04-04 04:04:04') and (t1.`string` <= 'dddd') and (t1.vstring <= 'dddd') and (t1.bin <= 0xdddd) and (t1.vbin <= 0xdddd) and ((t1.flags = 'one') or (t1.flags = 'one,two') or (t1.flags = 'one,two,three') or (t1.flags = 'one,two,three,four')) and ((t1.`options` = 'one') or (t1.`options` = 'two') or (t1.`options` = 'three') or (t1.`options` = 'four')))  (rows=77.5e-12)

select auto from t1 where
string <= "dddd" and
vstring <= "dddd" and
bin <= 0xDDDD and
vbin <= 0xDDDD and
tiny >= -4 and
short >= -4 and
medium >= -4 and
long_int >= -4 and
longlong >= -4 and
real_float <= 4.5 and
real_double <= 4.5 and
real_decimal <= 4.5 and
utiny <= 4 - 1 + 1 and /* Checking function composition */
ushort <= 4 and
umedium <= 4 and
ulong <= 4 and
ulonglong <= 4 and
/* bits <= b'100' and */
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field <= '1904-04-04' and
year_field <= '1904' and
time_field <= '04:04:04' and
date_time <= '1904-04-04 04:04:04'
order by auto;
auto
1
2
3
4
create index medium_index on t1(medium);
explain
select auto from t1 where
string = "aaaa" and
vstring = "aaaa" and
bin = 0xAAAA and
vbin = 0xAAAA and
tiny = -1 and
short = -1 and
medium = -1 and
long_int = -1 and
longlong = -1 and
real_float > 1.0 and real_float < 2.0 and
real_double > 1.0 and real_double < 2.0 and
real_decimal > 1.0 and real_decimal < 2.0 and
utiny = 1 and
ushort = 1 and
umedium = 1 and
ulong = 1 and
ulonglong = 1 and
/* bits = b'001' and */
options = 'one' and
flags = 'one' and
date_field = '1901-01-01' and
year_field = '1901' and
time_field = '01:01:01' and
date_time = '1901-01-01 01:01:01'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0)
    -> Index lookup on t1 using medium_index (medium = -(1)), with pushed condition: ((t1.time_field = TIME'01:01:01') and (t1.tiny = <cache>(-(1))) and (t1.short = <cache>(-(1))) and (t1.long_int = <cache>(-(1))) and (t1.longlong = -1) and (t1.utiny = 1) and (t1.ushort = 1) and (t1.umedium = 1) and (t1.ulong = 1) and (t1.ulonglong = 1) and (t1.date_field = DATE'1901-01-01') and (t1.year_field = 1901) and (t1.date_time = TIMESTAMP'1901-01-01 01:01:01') and (t1.real_float > 1) and (t1.real_float < 2) and (t1.real_double > 1) and (t1.real_double < 2) and (t1.real_decimal > 1.0000) and (t1.real_decimal < 2.0000) and (t1.`string` = 'aaaa') and (t1.vstring = 'aaaa') and (t1.bin = 0xaaaa) and (t1.vbin = 0xaaaa) and (t1.flags = 'one') and (t1.`options` = 'one'))  (rows=0)

select auto from t1 where
string = "aaaa" and
vstring = "aaaa" and
bin = 0xAAAA and
vbin = 0xAAAA and
tiny = -1 and
short = -1 and
medium = -1 and
long_int = -1 and
longlong = -1 and
real_float > 1.0 and real_float < 2.0 and
real_double > 1.0 and real_double < 2.0 and
real_decimal > 1.0 and real_decimal < 2.0 and
utiny = 1 and
ushort = 1 and
umedium = 1 and
ulong = 1 and
ulonglong = 1 and
/* bits = b'001' and */
options = 'one' and
flags = 'one' and
date_field = '1901-01-01' and
year_field = '1901' and
time_field = '01:01:01' and
date_time = '1901-01-01 01:01:01'
order by auto;
auto
1
explain
select auto from t1 where
string != "aaaa" and
vstring != "aaaa" and
bin != 0xAAAA and
vbin != 0xAAAA and
tiny != -1 and
short != -1 and
medium != -1 and
long_int != -1 and
longlong != -1 and
(real_float < 1.0 or real_float > 2.0) and
(real_double < 1.0 or real_double > 2.0) and
(real_decimal < 1.0 or real_decimal > 2.0) and
utiny != 1 and
ushort != 1 and
umedium != 1 and
ulong != 1 and
ulonglong != 1 and
/* bits != b'001' and */
options != 'one' and
flags != 'one' and
date_field != '1901-01-01' and
year_field != '1901' and
time_field != '01:01:01' and
date_time != '1901-01-01 01:01:01'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0.0823)
    -> Table scan on t1, with pushed condition: (((t1.real_float < 1) or (t1.real_float > 2)) and ((t1.real_double < 1) or (t1.real_double > 2)) and ((t1.real_decimal < 1.0000) or (t1.real_decimal > 2.0000)) and (t1.`options` <> 'one') and (t1.tiny <> <cache>(-(1))) and (t1.short <> <cache>(-(1))) and (t1.`medium` <> <cache>(-(1))) and (t1.long_int <> <cache>(-(1))) and (t1.longlong <> -1) and (t1.utiny <> 1) and (t1.ushort <> 1) and (t1.umedium <> 1) and (t1.ulong <> 1) and (t1.ulonglong <> 1) and (t1.date_field <> DATE'1901-01-01') and (t1.year_field <> 1901) and (t1.time_field <> TIME'01:01:01') and (t1.date_time <> TIMESTAMP'1901-01-01 01:01:01') and (t1.`string` <> 'aaaa') and (t1.vstring <> 'aaaa') and (t1.bin <> 0xaaaa) and (t1.vbin <> 0xaaaa) and (t1.flags <> 'one'))  (rows=0.0823)

select auto from t1 where
string != "aaaa" and
vstring != "aaaa" and
bin != 0xAAAA and
vbin != 0xAAAA and
tiny != -1 and
short != -1 and
medium != -1 and
long_int != -1 and
longlong != -1 and
(real_float < 1.0 or real_float > 2.0) and
(real_double < 1.0 or real_double > 2.0) and
(real_decimal < 1.0 or real_decimal > 2.0) and
utiny != 1 and
ushort != 1 and
umedium != 1 and
ulong != 1 and
ulonglong != 1 and
/* bits != b'001' and */
options != 'one' and
flags != 'one' and
date_field != '1901-01-01' and
year_field != '1901' and
time_field != '01:01:01' and
date_time != '1901-01-01 01:01:01'
order by auto;
auto
2
3
4
explain
select auto from t1 where
string > "aaaa" and
vstring > "aaaa" and
bin > 0xAAAA and
vbin > 0xAAAA and
tiny < -1 and
short < -1 and
medium < -1 and
long_int < -1 and
longlong < -1 and
real_float > 1.1 and
real_double > 1.1 and
real_decimal > 1.1 and
utiny > 1 and
ushort > 1 and
umedium > 1 and
ulong > 1 and
ulonglong > 1 and
/* bits > b'001' and */
(options = 'two' or options = 'three' or options = 'four') and
(flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field > '1901-01-01' and
year_field > '1901' and
time_field > '01:01:01' and
date_time > '1901-01-01 01:01:01'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=114e-12)
    -> Table scan on t1, with pushed condition: ((t1.tiny < <cache>(-(1))) and (t1.short < <cache>(-(1))) and (t1.`medium` < <cache>(-(1))) and (t1.long_int < <cache>(-(1))) and (t1.longlong < -1) and (t1.real_float > 1.100000023841858) and (t1.real_double > 1.1) and (t1.real_decimal > 1.1000) and (t1.utiny > 1) and (t1.ushort > 1) and (t1.umedium > 1) and (t1.ulong > 1) and (t1.ulonglong > 1) and (t1.date_field > DATE'1901-01-01') and (t1.year_field > 1901) and (t1.time_field > TIME'01:01:01') and (t1.date_time > TIMESTAMP'1901-01-01 01:01:01') and (t1.`string` > 'aaaa') and (t1.vstring > 'aaaa') and (t1.bin > 0xaaaa) and (t1.vbin > 0xaaaa) and ((t1.flags = 'one,two') or (t1.flags = 'one,two,three') or (t1.flags = 'one,two,three,four')) and ((t1.`options` = 'two') or (t1.`options` = 'three') or (t1.`options` = 'four')))  (rows=114e-12)

select auto from t1 where
string > "aaaa" and
vstring > "aaaa" and
bin > 0xAAAA and
vbin > 0xAAAA and
tiny < -1 and
short < -1 and
medium < -1 and
long_int < -1 and
longlong < -1 and
real_float > 1.1 and
real_double > 1.1 and
real_decimal > 1.1 and
utiny > 1 and
ushort > 1 and
umedium > 1 and
ulong > 1 and
ulonglong > 1 and
/* bits > b'001' and */
(options = 'two' or options = 'three' or options = 'four') and
(flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field > '1901-01-01' and
year_field > '1901' and
time_field > '01:01:01' and
date_time > '1901-01-01 01:01:01'
order by auto;
auto
2
3
4
explain
select auto from t1 where
string >= "aaaa" and
vstring >= "aaaa" and
bin >= 0xAAAA and
vbin >= 0xAAAA and
tiny <= -1 and
short <= -1 and
medium <= -1 and
long_int <= -1 and
longlong <= -1 and
real_float >= 1.0 and
real_double >= 1.0 and
real_decimal >= 1.0 and
utiny >= 1 and
ushort >= 1 and
umedium >= 1 and
ulong >= 1 and
ulonglong >= 1 and
/* bits >= b'001' and */
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field >= '1901-01-01' and
year_field >= '1901' and
time_field >= '01:01:01' and
date_time >= '1901-01-01 01:01:01'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=174e-12)
    -> Table scan on t1, with pushed condition: ((t1.tiny <= <cache>(-(1))) and (t1.short <= <cache>(-(1))) and (t1.`medium` <= <cache>(-(1))) and (t1.long_int <= <cache>(-(1))) and (t1.longlong <= -1) and (t1.real_float >= 1) and (t1.real_double >= 1) and (t1.real_decimal >= 1.0000) and (t1.utiny >= 1) and (t1.ushort >= 1) and (t1.umedium >= 1) and (t1.ulong >= 1) and (t1.ulonglong >= 1) and (t1.date_field >= DATE'1901-01-01') and (t1.year_field >= 1901) and (t1.time_field >= TIME'01:01:01') and (t1.date_time >= TIMESTAMP'1901-01-01 01:01:01') and (t1.`string` >= 'aaaa') and (t1.vstring >= 'aaaa') and (t1.bin >= 0xaaaa) and (t1.vbin >= 0xaaaa) and ((t1.flags = 'one') or (t1.flags = 'one,two') or (t1.flags = 'one,two,three') or (t1.flags = 'one,two,three,four')) and ((t1.`options` = 'one') or (t1.`options` = 'two') or (t1.`options` = 'three') or (t1.`options` = 'four')))  (rows=174e-12)

select auto from t1 where
string >= "aaaa" and
vstring >= "aaaa" and
bin >= 0xAAAA and
vbin >= 0xAAAA and
tiny <= -1 and
short <= -1 and
medium <= -1 and
long_int <= -1 and
longlong <= -1 and
real_float >= 1.0 and
real_double >= 1.0 and
real_decimal >= 1.0 and
utiny >= 1 and
ushort >= 1 and
umedium >= 1 and
ulong >= 1 and
ulonglong >= 1 and
/* bits >= b'001' and */
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field >= '1901-01-01' and
year_field >= '1901' and
time_field >= '01:01:01' and
date_time >= '1901-01-01 01:01:01'
order by auto;
auto
1
2
3
4
explain
select auto from t1 where
string < "dddd" and
vstring < "dddd" and
bin < 0xDDDD and
vbin < 0xDDDD and
tiny > -4 and
short > -4 and
medium > -4 and
long_int > -4 and
longlong > -4 and
real_float < 4.4 and
real_double < 4.4 and
real_decimal < 4.4 and
utiny < 4 and
ushort < 4 and
umedium < 4 and
ulong < 4 and
ulonglong < 4 and
/* bits < b'100' and */
(options = 'one' or options = 'two' or options = 'three') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three') and
date_field < '1904-01-01' and
year_field < '1904' and
time_field < '04:04:04' and
date_time < '1904-04-04 04:04:04'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=114e-12)
    -> Table scan on t1, with pushed condition: ((t1.tiny > <cache>(-(4))) and (t1.short > <cache>(-(4))) and (t1.`medium` > <cache>(-(4))) and (t1.long_int > <cache>(-(4))) and (t1.longlong > -4) and (t1.real_float < 4.400000095367432) and (t1.real_double < 4.4) and (t1.real_decimal < 4.4000) and (t1.utiny < 4) and (t1.ushort < 4) and (t1.umedium < 4) and (t1.ulong < 4) and (t1.ulonglong < 4) and (t1.date_field < DATE'1904-01-01') and (t1.year_field < 1904) and (t1.time_field < TIME'04:04:04') and (t1.date_time < TIMESTAMP'1904-04-04 04:04:04') and (t1.`string` < 'dddd') and (t1.vstring < 'dddd') and (t1.bin < 0xdddd) and (t1.vbin < 0xdddd) and ((t1.flags = 'one') or (t1.flags = 'one,two') or (t1.flags = 'one,two,three')) and ((t1.`options` = 'one') or (t1.`options` = 'two') or (t1.`options` = 'three')))  (rows=114e-12)

select auto from t1 where
string < "dddd" and
vstring < "dddd" and
bin < 0xDDDD and
vbin < 0xDDDD and
tiny > -4 and
short > -4 and
medium > -4 and
long_int > -4 and
longlong > -4 and
real_float < 4.4 and
real_double < 4.4 and
real_decimal < 4.4 and
utiny < 4 and
ushort < 4 and
umedium < 4 and
ulong < 4 and
ulonglong < 4 and
/* bits < b'100' and */
(options = 'one' or options = 'two' or options = 'three') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three') and
date_field < '1904-01-01' and
year_field < '1904' and
time_field < '04:04:04' and
date_time < '1904-04-04 04:04:04'
order by auto;
auto
1
2
3
explain
select auto from t1 where
string <= "dddd" and
vstring <= "dddd" and
bin <= 0xDDDD and
vbin <= 0xDDDD and
tiny >= -4 and
short >= -4 and
medium >= -4 and
long_int >= -4 and
longlong >= -4 and
real_float <= 4.5 and
real_double <= 4.5 and
real_decimal <= 4.5 and
utiny <= 4 - 1 + 1 and /* Checking function composition */
ushort <= 4 and
umedium <= 4 and
ulong <= 4 and
ulonglong <= 4 and
/* bits <= b'100' and */
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field <= '1904-04-04' and
year_field <= '1904' and
time_field <= '04:04:04' and
date_time <= '1904-04-04 04:04:04'
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=174e-12)
    -> Table scan on t1, with pushed condition: ((t1.tiny >= <cache>(-(4))) and (t1.short >= <cache>(-(4))) and (t1.`medium` >= <cache>(-(4))) and (t1.long_int >= <cache>(-(4))) and (t1.longlong >= -4) and (t1.real_float <= 4.5) and (t1.real_double <= 4.5) and (t1.real_decimal <= 4.5000) and (t1.utiny <= <cache>(((4 - 1) + 1))) and (t1.ushort <= 4) and (t1.umedium <= 4) and (t1.ulong <= 4) and (t1.ulonglong <= 4) and (t1.date_field <= DATE'1904-04-04') and (t1.year_field <= 1904) and (t1.time_field <= TIME'04:04:04') and (t1.date_time <= TIMESTAMP'1904-04-04 04:04:04') and (t1.`string` <= 'dddd') and (t1.vstring <= 'dddd') and (t1.bin <= 0xdddd) and (t1.vbin <= 0xdddd) and ((t1.flags = 'one') or (t1.flags = 'one,two') or (t1.flags = 'one,two,three') or (t1.flags = 'one,two,three,four')) and ((t1.`options` = 'one') or (t1.`options` = 'two') or (t1.`options` = 'three') or (t1.`options` = 'four')))  (rows=174e-12)

select auto from t1 where
string <= "dddd" and
vstring <= "dddd" and
bin <= 0xDDDD and
vbin <= 0xDDDD and
tiny >= -4 and
short >= -4 and
medium >= -4 and
long_int >= -4 and
longlong >= -4 and
real_float <= 4.5 and
real_double <= 4.5 and
real_decimal <= 4.5 and
utiny <= 4 - 1 + 1 and /* Checking function composition */
ushort <= 4 and
umedium <= 4 and
ulong <= 4 and
ulonglong <= 4 and
/* bits <= b'100' and */
(options = 'one' or options = 'two' or options = 'three' or options = 'four') and
(flags = 'one' or flags = 'one,two' or flags = 'one,two,three' or flags = 'one,two,three,four') and
date_field <= '1904-04-04' and
year_field <= '1904' and
time_field <= '04:04:04' and
date_time <= '1904-04-04 04:04:04'
order by auto;
auto
1
2
3
4
explain
select auto from t1 where
string like "b%" and
vstring like "b%" and
bin like concat(0xBB, '%') and
vbin like concat(0xBB, '%')
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=609e-6)
    -> Table scan on t1, with pushed condition: ((t1.`string` like 'b%') and (t1.vstring like 'b%') and (t1.bin like <cache>(concat(0xbb,'%'))) and (t1.vbin like <cache>(concat(0xbb,'%'))))  (rows=609e-6)

select auto from t1 where
string like "b%" and
vstring like "b%" and
bin like concat(0xBB, '%') and
vbin like concat(0xBB, '%')
order by auto;
auto
2
explain
select auto from t1 where
string not like "b%" and
vstring not like "b%" and
bin not like concat(0xBB, '%') and
vbin not like concat(0xBB, '%')
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=2.5)
    -> Table scan on t1, with pushed condition: ((not((t1.`string` like 'b%'))) and (not((t1.vstring like 'b%'))) and (not((t1.bin like <cache>(concat(0xbb,'%'))))) and (not((t1.vbin like <cache>(concat(0xbb,'%'))))))  (rows=2.5)

select auto from t1 where
string not like "b%" and
vstring not like "b%" and
bin not like concat(0xBB, '%') and
vbin not like concat(0xBB, '%')
order by auto;
auto
1
3
4
explain
select auto from t1 where
(string between "aaaa" and "cccc") and
(vstring between "aaaa" and "cccc") and
(bin between 0xAAAA and 0xCCCC) and
(vbin between 0xAAAA and 0xCCCC) and
(tiny between -3 and -1) and
(short between -3 and -1) and
(medium between -3 and -1) and
(long_int between -3 and -1) and
(longlong between -3 and -1) and
(utiny between 1 and 3) and
(ushort between 1 and 3) and
(umedium between 1 and 3) and
(ulong between 1 and 3) and
(ulonglong between 1 and 3) and
/* (bits between b'001' and b'011') and */
(options between 'one' and 'three') and
(flags between 'one' and 'one,two,three') and
(date_field between '1901-01-01' and '1903-03-03') and
(year_field between '1901' and '1903') and
(time_field between '01:01:01' and '03:03:03') and
(date_time between '1901-01-01 01:01:01' and '1903-03-03 03:03:03')
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0)
    -> Filter: (t1.`options` between 'one' and 'three')  (rows=0)
        -> Table scan on t1, with pushed condition: ((t1.tiny between <cache>(-(3)) and <cache>(-(1))) and (t1.short between <cache>(-(3)) and <cache>(-(1))) and (t1.`medium` between <cache>(-(3)) and <cache>(-(1))) and (t1.long_int between <cache>(-(3)) and <cache>(-(1))) and (t1.longlong between -3 and -1) and (t1.utiny between 1 and 3) and (t1.ushort between 1 and 3) and (t1.umedium between 1 and 3) and (t1.ulong between 1 and 3) and (t1.ulonglong between 1 and 3) and (t1.date_field between '1901-01-01' and '1903-03-03') and (t1.year_field between 1901 and 1903) and (t1.time_field between '01:01:01' and '03:03:03') and (t1.date_time between '1901-01-01 01:01:01' and '1903-03-03 03:03:03') and (t1.`string` between 'aaaa' and 'cccc') and (t1.vstring between 'aaaa' and 'cccc') and (t1.bin between 0xaaaa and 0xcccc) and (t1.vbin between 0xaaaa and 0xcccc) and (t1.flags between 'one' and 'one,two,three'))  (rows=4)

select auto from t1 where
(string between "aaaa" and "cccc") and
(vstring between "aaaa" and "cccc") and
(bin between 0xAAAA and 0xCCCC) and
(vbin between 0xAAAA and 0xCCCC) and
(tiny between -3 and -1) and
(short between -3 and -1) and
(medium between -3 and -1) and
(long_int between -3 and -1) and
(longlong between -3 and -1) and
(utiny between 1 and 3) and
(ushort between 1 and 3) and
(umedium between 1 and 3) and
(ulong between 1 and 3) and
(ulonglong between 1 and 3) and
/* (bits between b'001' and b'011') and */
(options between 'one' and 'three') and
(flags between 'one' and 'one,two,three') and
(date_field between '1901-01-01' and '1903-03-03') and
(year_field between '1901' and '1903') and
(time_field between '01:01:01' and '03:03:03') and
(date_time between '1901-01-01 01:01:01' and '1903-03-03 03:03:03')
order by auto;
auto
1
3
explain
select auto from t1 where
("aaaa" between string and string) and
("aaaa" between vstring and vstring) and
(0xAAAA between bin and bin) and
(0xAAAA between vbin and vbin) and
(-1 between tiny and tiny) and
(-1 between short and short) and
(-1 between medium and medium) and
(-1 between long_int and long_int) and
(-1 between longlong and longlong) and
(1 between utiny and utiny) and
(1 between ushort and ushort) and
(1 between umedium and umedium) and
(1 between ulong and ulong) and
(1 between ulonglong and ulonglong) and
/* (b'001' between bits and bits) and */
('one' between options and options) and
('one' between flags and flags) and
('1901-01-01' between date_field and date_field) and
('1901' between year_field and year_field) and
('01:01:01' between time_field and time_field) and
('1901-01-01 01:01:01' between date_time and date_time)
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0)
    -> Table scan on t1, with pushed condition: ((<cache>(-(1)) between t1.tiny and t1.tiny) and (<cache>(-(1)) between t1.short and t1.short) and (<cache>(-(1)) between t1.`medium` and t1.`medium`) and (<cache>(-(1)) between t1.long_int and t1.long_int) and (<cache>(-(1)) between t1.longlong and t1.longlong) and (1 between t1.utiny and t1.utiny) and (1 between t1.ushort and t1.ushort) and (1 between t1.umedium and t1.umedium) and (1 between t1.ulong and t1.ulong) and (1 between t1.ulonglong and t1.ulonglong) and ('1901-01-01' between t1.date_field and t1.date_field) and ('1901' between t1.year_field and t1.year_field) and ('01:01:01' between t1.time_field and t1.time_field) and ('1901-01-01 01:01:01' between t1.date_time and t1.date_time) and ('aaaa' between t1.`string` and t1.`string`) and ('aaaa' between t1.vstring and t1.vstring) and (0xaaaa between t1.bin and t1.bin) and (0xaaaa between t1.vbin and t1.vbin) and ('one' between t1.flags and t1.flags) and ('one' between t1.`options` and t1.`options`))  (rows=0)

select auto from t1 where
("aaaa" between string and string) and
("aaaa" between vstring and vstring) and
(0xAAAA between bin and bin) and
(0xAAAA between vbin and vbin) and
(-1 between tiny and tiny) and
(-1 between short and short) and
(-1 between medium and medium) and
(-1 between long_int and long_int) and
(-1 between longlong and longlong) and
(1 between utiny and utiny) and
(1 between ushort and ushort) and
(1 between umedium and umedium) and
(1 between ulong and ulong) and
(1 between ulonglong and ulonglong) and
/* (b'001' between bits and bits) and */
('one' between options and options) and
('one' between flags and flags) and
('1901-01-01' between date_field and date_field) and
('1901' between year_field and year_field) and
('01:01:01' between time_field and time_field) and
('1901-01-01 01:01:01' between date_time and date_time)
order by auto;
auto
1
explain
select auto from t1 where
(string not between "aaaa" and "cccc") and
(vstring not between "aaaa" and "cccc") and
(bin not between 0xAAAA and 0xCCCC) and
(vbin not between 0xAAAA and 0xCCCC) and
(tiny not between -3 and -1) and
(short not between -3 and -1) and
(medium not between -3 and -1) and
(long_int not between -3 and -1) and
(longlong not between -3 and -1) and
(utiny not between 1 and 3) and
(ushort not between 1 and 3) and
(umedium not between 1 and 3) and
(ulong not between 1 and 3) and
(ulonglong not between 1 and 3) and
/* (bits not between b'001' and b'011') and */
(options not between 'one' and 'three') and
(flags not between 'one' and 'one,two,three') and
(date_field not between '1901-01-01' and '1903-03-03') and
(year_field not between '1901' and '1903') and
(time_field not between '01:01:01' and '03:03:03') and
(date_time not between '1901-01-01 01:01:01' and '1903-03-03 03:03:03')
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0.384)
    -> Filter: (t1.`options` not between 'one' and 'three')  (rows=0.384)
        -> Table scan on t1, with pushed condition: ((t1.tiny not between <cache>(-(3)) and <cache>(-(1))) and (t1.short not between <cache>(-(3)) and <cache>(-(1))) and (t1.`medium` not between <cache>(-(3)) and <cache>(-(1))) and (t1.long_int not between <cache>(-(3)) and <cache>(-(1))) and (t1.longlong not between -3 and -1) and (t1.utiny not between 1 and 3) and (t1.ushort not between 1 and 3) and (t1.umedium not between 1 and 3) and (t1.ulong not between 1 and 3) and (t1.ulonglong not between 1 and 3) and (t1.date_field not between '1901-01-01' and '1903-03-03') and (t1.year_field not between 1901 and 1903) and (t1.time_field not between '01:01:01' and '03:03:03') and (t1.date_time not between '1901-01-01 01:01:01' and '1903-03-03 03:03:03') and (t1.`string` not between 'aaaa' and 'cccc') and (t1.vstring not between 'aaaa' and 'cccc') and (t1.bin not between 0xaaaa and 0xcccc) and (t1.vbin not between 0xaaaa and 0xcccc) and (t1.flags not between 'one' and 'one,two,three'))  (rows=4)

select auto from t1 where
(string not between "aaaa" and "cccc") and
(vstring not between "aaaa" and "cccc") and
(bin not between 0xAAAA and 0xCCCC) and
(vbin not between 0xAAAA and 0xCCCC) and
(tiny not between -3 and -1) and
(short not between -3 and -1) and
(medium not between -3 and -1) and
(long_int not between -3 and -1) and
(longlong not between -3 and -1) and
(utiny not between 1 and 3) and
(ushort not between 1 and 3) and
(umedium not between 1 and 3) and
(ulong not between 1 and 3) and
(ulonglong not between 1 and 3) and
/* (bits not between b'001' and b'011') and */
(options not between 'one' and 'three') and
(flags not between 'one' and 'one,two,three') and
(date_field not between '1901-01-01' and '1903-03-03') and
(year_field not between '1901' and '1903') and
(time_field not between '01:01:01' and '03:03:03') and
(date_time not between '1901-01-01 01:01:01' and '1903-03-03 03:03:03')
order by auto;
auto
4
explain
select auto from t1 where
("aaaa" not between string and string) and
("aaaa" not between vstring and vstring) and
(0xAAAA not between bin and bin) and
(0xAAAA not between vbin and vbin) and
(-1 not between tiny and tiny) and
(-1 not between short and short) and
(-1 not between medium and medium) and
(-1 not between long_int and long_int) and
(-1 not between longlong and longlong) and
(1 not between utiny and utiny) and
(1 not between ushort and ushort) and
(1 not between umedium and umedium) and
(1 not between ulong and ulong) and
(1 not between ulonglong and ulonglong) and
/* (b'001' not between bits and bits) and */
('one' not between options and options) and
('one' not between flags and flags) and
('1901-01-01' not between date_field and date_field) and
('1901' not between year_field and year_field) and
('01:01:01' not between time_field and time_field) and
('1901-01-01 01:01:01' not between date_time and date_time)
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0.384)
    -> Table scan on t1, with pushed condition: (('one' not between t1.`options` and t1.`options`) and (<cache>(-(1)) not between t1.tiny and t1.tiny) and (<cache>(-(1)) not between t1.short and t1.short) and (<cache>(-(1)) not between t1.`medium` and t1.`medium`) and (<cache>(-(1)) not between t1.long_int and t1.long_int) and (<cache>(-(1)) not between t1.longlong and t1.longlong) and (1 not between t1.utiny and t1.utiny) and (1 not between t1.ushort and t1.ushort) and (1 not between t1.umedium and t1.umedium) and (1 not between t1.ulong and t1.ulong) and (1 not between t1.ulonglong and t1.ulonglong) and ('1901-01-01' not between t1.date_field and t1.date_field) and ('1901' not between t1.year_field and t1.year_field) and ('01:01:01' not between t1.time_field and t1.time_field) and ('1901-01-01 01:01:01' not between t1.date_time and t1.date_time) and ('aaaa' not between t1.`string` and t1.`string`) and ('aaaa' not between t1.vstring and t1.vstring) and (0xaaaa not between t1.bin and t1.bin) and (0xaaaa not between t1.vbin and t1.vbin) and ('one' not between t1.flags and t1.flags))  (rows=0.384)

select auto from t1 where
("aaaa" not between string and string) and
("aaaa" not between vstring and vstring) and
(0xAAAA not between bin and bin) and
(0xAAAA not between vbin and vbin) and
(-1 not between tiny and tiny) and
(-1 not between short and short) and
(-1 not between medium and medium) and
(-1 not between long_int and long_int) and
(-1 not between longlong and longlong) and
(1 not between utiny and utiny) and
(1 not between ushort and ushort) and
(1 not between umedium and umedium) and
(1 not between ulong and ulong) and
(1 not between ulonglong and ulonglong) and
/* (b'001' not between bits and bits) and */
('one' not between options and options) and
('one' not between flags and flags) and
('1901-01-01' not between date_field and date_field) and
('1901' not between year_field and year_field) and
('01:01:01' not between time_field and time_field) and
('1901-01-01 01:01:01' not between date_time and date_time)
order by auto;
auto
2
3
4
explain
select auto from t1 where
string in("aaaa","cccc") and
vstring in("aaaa","cccc") and
bin in(0xAAAA,0xCCCC) and
vbin in(0xAAAA,0xCCCC) and
tiny in(-1,-3) and
short in(-1,-3) and
medium in(-1,-3) and
long_int in(-1,-3) and
longlong in(-1,-3) and
utiny in(1,3) and
ushort in(1,3) and
umedium in(1,3) and
ulong in(1,3) and
ulonglong in(1,3) and
/* bits in(b'001',b'011') and */
options in('one','three') and
flags in('one','one,two,three') and
date_field in('1901-01-01','1903-03-03') and
year_field in('1901','1903') and
time_field in('01:01:01','03:03:03') and
date_time in('1901-01-01 01:01:01','1903-03-03 03:03:03')
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0)
    -> Table scan on t1, with pushed condition: ((t1.tiny in (<cache>(-(1)),<cache>(-(3)))) and (t1.short in (<cache>(-(1)),<cache>(-(3)))) and (t1.`medium` in (<cache>(-(1)),<cache>(-(3)))) and (t1.long_int in (<cache>(-(1)),<cache>(-(3)))) and (t1.longlong in (<cache>(-(1)),<cache>(-(3)))) and (t1.utiny in (1,3)) and (t1.ushort in (1,3)) and (t1.umedium in (1,3)) and (t1.ulong in (1,3)) and (t1.ulonglong in (1,3)) and (t1.date_field in ('1901-01-01','1903-03-03')) and (t1.year_field in (1901,1903)) and (t1.time_field in ('01:01:01','03:03:03')) and (t1.date_time in ('1901-01-01 01:01:01','1903-03-03 03:03:03')) and (t1.`string` in ('aaaa','cccc')) and (t1.vstring in ('aaaa','cccc')) and (t1.bin in (0xaaaa,0xcccc)) and (t1.vbin in (0xaaaa,0xcccc)) and (t1.flags in ('one','one,two,three')) and (t1.`options` in ('one','three')))  (rows=0)

select auto from t1 where
string in("aaaa","cccc") and
vstring in("aaaa","cccc") and
bin in(0xAAAA,0xCCCC) and
vbin in(0xAAAA,0xCCCC) and
tiny in(-1,-3) and
short in(-1,-3) and
medium in(-1,-3) and
long_int in(-1,-3) and
longlong in(-1,-3) and
utiny in(1,3) and
ushort in(1,3) and
umedium in(1,3) and
ulong in(1,3) and
ulonglong in(1,3) and
/* bits in(b'001',b'011') and */
options in('one','three') and
flags in('one','one,two,three') and
date_field in('1901-01-01','1903-03-03') and
year_field in('1901','1903') and
time_field in('01:01:01','03:03:03') and
date_time in('1901-01-01 01:01:01','1903-03-03 03:03:03')
order by auto;
auto
1
3
explain
select auto from t1 where
"aaaa" in(string) and
"aaaa" in(vstring) and
0xAAAA in(bin) and
0xAAAA in(vbin) and
(-1 in(tiny)) and
(-1 in (short)) and
(-1 in(medium)) and
(-1 in(long_int)) and
(-1 in(longlong)) and
1 in(utiny) and
1 in(ushort) and
1 in(umedium) and
1 in(ulong) and
1 in(ulonglong) and
/* b'001' in(bits) and */
'one' in(options) and
'one' in(flags) and
'1901-01-01' in(date_field) and
'1901' in(year_field) and
'01:01:01' in(time_field) and
'1901-01-01 01:01:01' in(date_time)
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0)
    -> Index lookup on t1 using medium_index (medium = -(1)), with pushed condition: ((TIME'01:01:01' = t1.time_field) and (t1.tiny = <cache>(-(1))) and (t1.short = <cache>(-(1))) and (t1.long_int = <cache>(-(1))) and (t1.longlong = -1) and (t1.utiny = 1) and (t1.ushort = 1) and (t1.umedium = 1) and (t1.ulong = 1) and (t1.ulonglong = 1) and (t1.date_field = DATE'1901-01-01') and (t1.year_field = 1901) and (t1.date_time = TIMESTAMP'1901-01-01 01:01:01') and (t1.`string` = 'aaaa') and (t1.vstring = 'aaaa') and (t1.bin = 0xaaaa) and (t1.vbin = 0xaaaa) and (t1.flags = 'one') and (t1.`options` = 'one'))  (rows=0)

select auto from t1 where
"aaaa" in(string) and
"aaaa" in(vstring) and
0xAAAA in(bin) and
0xAAAA in(vbin) and
(-1 in(tiny)) and
(-1 in (short)) and
(-1 in(medium)) and
(-1 in(long_int)) and
(-1 in(longlong)) and
1 in(utiny) and
1 in(ushort) and
1 in(umedium) and
1 in(ulong) and
1 in(ulonglong) and
/* b'001' in(bits) and */
'one' in(options) and
'one' in(flags) and
'1901-01-01' in(date_field) and
'1901' in(year_field) and
'01:01:01' in(time_field) and
'1901-01-01 01:01:01' in(date_time)
order by auto;
auto
1
explain
select auto from t1 where
string not in("aaaa","cccc") and
vstring not in("aaaa","cccc") and
bin not in(0xAAAA,0xCCCC) and
vbin not in(0xAAAA,0xCCCC) and
tiny not in(-1,-3) and
short not in(-1,-3) and
medium not in(-1,-3) and
long_int not in(-1,-3) and
longlong not in(-1,-3) and
utiny not in(1,3) and
ushort not in(1,3) and
umedium not in(1,3) and
ulong not in(1,3) and
ulonglong not in(1,3) and
/* bits not in(b'001',b'011') and */
options not in('one','three') and
flags not in('one','one,two,three') and
date_field not in('1901-01-01','1903-03-03') and
year_field not in('1901','1903') and
time_field not in('01:01:01','03:03:03') and
date_time not in('1901-01-01 01:01:01','1903-03-03 03:03:03')
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0.0432)
    -> Table scan on t1, with pushed condition: ((t1.`options` not in ('one','three')) and (t1.tiny not in (<cache>(-(1)),<cache>(-(3)))) and (t1.short not in (<cache>(-(1)),<cache>(-(3)))) and (t1.`medium` not in (<cache>(-(1)),<cache>(-(3)))) and (t1.long_int not in (<cache>(-(1)),<cache>(-(3)))) and (t1.longlong not in (<cache>(-(1)),<cache>(-(3)))) and (t1.utiny not in (1,3)) and (t1.ushort not in (1,3)) and (t1.umedium not in (1,3)) and (t1.ulong not in (1,3)) and (t1.ulonglong not in (1,3)) and (t1.date_field not in ('1901-01-01','1903-03-03')) and (t1.year_field not in (1901,1903)) and (t1.time_field not in ('01:01:01','03:03:03')) and (t1.date_time not in ('1901-01-01 01:01:01','1903-03-03 03:03:03')) and (t1.`string` not in ('aaaa','cccc')) and (t1.vstring not in ('aaaa','cccc')) and (t1.bin not in (0xaaaa,0xcccc)) and (t1.vbin not in (0xaaaa,0xcccc)) and (t1.flags not in ('one','one,two,three')))  (rows=0.0432)

select auto from t1 where
string not in("aaaa","cccc") and
vstring not in("aaaa","cccc") and
bin not in(0xAAAA,0xCCCC) and
vbin not in(0xAAAA,0xCCCC) and
tiny not in(-1,-3) and
short not in(-1,-3) and
medium not in(-1,-3) and
long_int not in(-1,-3) and
longlong not in(-1,-3) and
utiny not in(1,3) and
ushort not in(1,3) and
umedium not in(1,3) and
ulong not in(1,3) and
ulonglong not in(1,3) and
/* bits not in(b'001',b'011') and */
options not in('one','three') and
flags not in('one','one,two,three') and
date_field not in('1901-01-01','1903-03-03') and
year_field not in('1901','1903') and
time_field not in('01:01:01','03:03:03') and
date_time not in('1901-01-01 01:01:01','1903-03-03 03:03:03')
order by auto;
auto
2
4
explain
select auto from t1 where
"aaaa" not in(string) and
"aaaa" not in(vstring) and
0xAAAA not in(bin) and
0xAAAA not in(vbin) and
(-1 not in(tiny)) and
(-1 not in(short)) and
(-1 not in(medium)) and
(-1 not in(long_int)) and
(-1 not in(longlong)) and
1 not in(utiny) and
1 not in(ushort) and
1 not in(umedium) and
1 not in(ulong) and
1 not in(ulonglong) and
/* b'001' not in(bits) and */
'one' not in(options) and
'one' not in(flags) and
'1901-01-01' not in(date_field) and
'1901' not in(year_field) and
'01:01:01' not in(time_field) and
'1901-01-01 01:01:01' not in(date_time)
order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0.48)
    -> Table scan on t1, with pushed condition: (('one' <> t1.`options`) and (<cache>(-(1)) <> t1.tiny) and (<cache>(-(1)) <> t1.short) and (<cache>(-(1)) <> t1.`medium`) and (<cache>(-(1)) <> t1.long_int) and (-1 <> t1.longlong) and (1 <> t1.utiny) and (1 <> t1.ushort) and (1 <> t1.umedium) and (1 <> t1.ulong) and (1 <> t1.ulonglong) and (DATE'1901-01-01' <> t1.date_field) and (1901 <> t1.year_field) and (TIME'01:01:01' <> t1.time_field) and (TIMESTAMP'1901-01-01 01:01:01' <> t1.date_time) and ('aaaa' <> t1.`string`) and ('aaaa' <> t1.vstring) and (0xaaaa <> t1.bin) and (0xaaaa <> t1.vbin) and ('one' <> t1.flags))  (rows=0.48)

select auto from t1 where
"aaaa" not in(string) and
"aaaa" not in(vstring) and
0xAAAA not in(bin) and
0xAAAA not in(vbin) and
(-1 not in(tiny)) and
(-1 not in(short)) and
(-1 not in(medium)) and
(-1 not in(long_int)) and
(-1 not in(longlong)) and
1 not in(utiny) and
1 not in(ushort) and
1 not in(umedium) and
1 not in(ulong) and
1 not in(ulonglong) and
/* b'001' not in(bits) and */
'one' not in(options) and
'one' not in(flags) and
'1901-01-01' not in(date_field) and
'1901' not in(year_field) and
'01:01:01' not in(time_field) and
'1901-01-01 01:01:01' not in(date_time)
order by auto;
auto
2
3
4
update t1
set medium = 17
where
string = "aaaa" and
vstring = "aaaa" and
bin = 0xAAAA and
vbin = 0xAAAA and
tiny = -1 and
short = -1 and
medium = -1 and
long_int = -1 and
longlong = -1 and
real_float > 1.0 and real_float < 2.0 and
real_double > 1.0 and real_double < 2.0 and
real_decimal > 1.0 and real_decimal < 2.0 and
utiny = 1 and
ushort = 1 and
umedium = 1 and
ulong = 1 and
ulonglong = 1 and
/* bits = b'001' and */
options = 'one' and
flags = 'one' and
date_field = '1901-01-01' and
year_field = '1901' and
time_field = '01:01:01' and
date_time = '1901-01-01 01:01:01';
delete from t1
where
string = "aaaa" and
vstring = "aaaa" and
bin = 0xAAAA and
vbin = 0xAAAA and
tiny = -1 and
short = -1 and
medium = 17 and
long_int = -1 and
longlong = -1 and
real_float > 1.0 and real_float < 2.0 and
real_double > 1.0 and real_double < 2.0 and
real_decimal > 1.0 and real_decimal < 2.0 and
utiny = 1 and
ushort = 1 and
umedium = 1 and
ulong = 1 and
ulonglong = 1 and
/* bits = b'001' and */
options = 'one' and
flags = 'one' and
date_field = '1901-01-01' and
year_field = '1901' and
time_field = '01:01:01' and
date_time = '1901-01-01 01:01:01';
select count(*) from t1;
count(*)
3
explain
select * from t2 where attr3 is null or attr1 > 2 and pk1= 3 order by pk1;
EXPLAIN
-> Sort: t2.pk1  (rows=0.9)
    -> Table scan on t2, with pushed condition: ((t2.attr3 is null) or ((t2.attr1 > 2) and (t2.pk1 = 3)))  (rows=0.9)

select * from t2 where attr3 is null or attr1 > 2 and pk1= 3 order by pk1;
pk1	attr1	attr2	attr3
2	2	NULL	NULL
3	3	3	d
explain
select * from t2 where attr3 is not null and attr1 > 2 order by pk1;
EXPLAIN
-> Sort: t2.pk1  (rows=1.8)
    -> Table scan on t2, with pushed condition: ((t2.attr1 > 2) and (t2.attr3 is not null))  (rows=1.8)

select * from t2 where attr3 is not null and attr1 > 2 order by pk1;
pk1	attr1	attr2	attr3
3	3	3	d
4	4	4	e
5	5	5	f
explain
select * from t3 where attr2 >  9223372036854775803 and attr3 != 3 order by pk1;
EXPLAIN
-> Sort: t3.pk1  (rows=1.8)
    -> Table scan on t3, with pushed condition: ((t3.attr2 > 9223372036854775803) and (t3.attr3 <> 3))  (rows=1.8)

select * from t3 where attr2 >  9223372036854775803 and attr3 != 3 order by pk1;
pk1	attr1	attr2	attr3	attr4
2	2	9223372036854775804	2	c
4	4	9223372036854775806	4	e
5	5	9223372036854775807	5	f
explain
select * from t2,t3 where t2.attr1 < 1 and t2.attr2 = t3.attr2 and t3.attr1 < 5 order by t2.pk1;
EXPLAIN
-> Sort: t2.pk1  (rows=0.4)
    -> Inner hash join (t2.attr2 = t3.attr2)  (rows=0.4)
        -> Table scan on t2, with pushed condition: (t2.attr1 < 1)  (rows=2)
        -> Hash
            -> Table scan on t3, with pushed condition: (t3.attr1 < 5)  (rows=2)

Warnings:
Note	1003	Can't push table 't2' as child, 'type' must be a 'ref' access
select * from t2,t3 where t2.attr1 < 1 and t2.attr2 = t3.attr2 and t3.attr1 < 5 order by t2.pk1;
pk1	attr1	attr2	attr3	pk1	attr1	attr2	attr3	attr4
0	0	0	a	0	0	0	0	a
explain
select * from t4 where attr1 < 5 and attr2 > 9223372036854775803 and attr3 != 3 order by t4.pk1;
EXPLAIN
-> Sort: t4.pk1  (rows=0.9)
    -> Table scan on t4, with pushed condition: ((t4.attr1 < 5) and (t4.attr2 > 9223372036854775803) and (t4.attr3 <> 3))  (rows=0.9)

select * from t4 where attr1 < 5 and attr2 > 9223372036854775803 and attr3 != 3 order by t4.pk1;
pk1	attr1	attr2	attr3	attr4
2	2	9223372036854775804	2	c
4	4	9223372036854775806	4	e
explain
select * from t3,t4 where t4.attr1 > 1 and t4.attr2 = t3.attr2 and t4.attr3 < 5 order by t4.pk1;
EXPLAIN
-> Sort: t4.pk1  (rows=0.6)
    -> Inner hash join (t4.attr2 = t3.attr2)  (rows=0.6)
        -> Table scan on t3  (rows=6)
        -> Hash
            -> Table scan on t4, with pushed condition: ((t4.attr1 > 1) and (t4.attr3 < 5))  (rows=1)

Warnings:
Note	1003	Can't push table 't3' as child, 'type' must be a 'ref' access
select * from t3,t4 where t4.attr1 > 1 and t4.attr2 = t3.attr2 and t4.attr3 < 5 order by t4.pk1;
pk1	attr1	attr2	attr3	attr4	pk1	attr1	attr2	attr3	attr4
2	2	9223372036854775804	2	c	2	2	9223372036854775804	2	c
3	3	9223372036854775805	3	d	3	3	9223372036854775805	3	d
4	4	9223372036854775806	4	e	4	4	9223372036854775806	4	e
explain
select auto from t1 where string = "aaaa" collate utf8mb4_general_ci order by auto;
EXPLAIN
-> Sort: t1.`auto`  (rows=0.3)
    -> Filter: (t1.`string` = <cache>(('aaaa' collate utf8mb4_general_ci)))  (rows=0.3)
        -> Table scan on t1  (rows=3)

explain
select * from t2 where (attr1 < 2) = (attr2 < 2) order by pk1;
EXPLAIN
-> Filter: ((t2.attr1 < 2) = (t2.attr2 < 2))  (rows=6)
    -> Index scan on t2 using PRIMARY  (rows=6)

explain
select * from t3 left join t4 on t4.attr2 = t3.attr2 where t4.attr1 > 1 and t4.attr3 < 5 or t4.attr1 is null order by t4.pk1;
EXPLAIN
-> Sort: t4.pk1  (rows=1.2)
    -> Filter: (((t4.attr1 > 1) and (t4.attr3 < 5)) or (t4.attr1 is null))  (rows=1.2)
        -> Left hash join (t4.attr2 = t3.attr2)  (rows=6)
            -> Table scan on t3  (rows=6)
            -> Hash
                -> Table scan on t4  (rows=6)

Warnings:
Note	1003	Can't push table 't4' as child, 'type' must be a 'ref' access
create table t5 (a int primary key auto_increment, b tinytext not null)
engine = ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t5 (b) values ('jonas'), ('jensing'), ('johan');
set @@optimizer_switch='engine_condition_pushdown=off';
select * from t5 where b like '%jo%' order by a;
a	b
1	jonas
3	johan
set @@optimizer_switch = 'engine_condition_pushdown=on';
explain select * from t5 where b like '%jo%';
EXPLAIN
-> Filter: (t5.b like '%jo%')  (rows=0.333)
    -> Table scan on t5  (rows=3)

select * from t5 where b like '%jo%' order by a;
a	b
1	jonas
3	johan
set @@optimizer_switch='engine_condition_pushdown=off';
select auto from t1 where date_time like '1902-02-02 %' order by auto;
auto
2
select auto from t1 where date_time not like '1902-02-02 %' order by auto;
auto
3
4
set @@optimizer_switch = 'engine_condition_pushdown=on';
explain select auto from t1 where date_time like '1902-02-02 %';
EXPLAIN
-> Filter: (t1.date_time like '1902-02-02 %')  (rows=0.333)
    -> Table scan on t1  (rows=3)

select auto from t1 where date_time like '1902-02-02 %' order by auto;
auto
2
explain select auto from t1 where date_time not like '1902-02-02 %';
EXPLAIN
-> Filter: (not((t1.date_time like '1902-02-02 %')))  (rows=2.67)
    -> Table scan on t1  (rows=3)

select auto from t1 where date_time not like '1902-02-02 %' order by auto;
auto
3
4
drop table t1;
create table t1 (a int, b varchar(3), primary key using hash(a))
engine=ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t1 values (1,'a'), (2,'ab'), (3,'abc');
set @@optimizer_switch='engine_condition_pushdown=off';
select * from t1 where b like 'ab';
a	b
2	ab
select * from t1 where b like 'ab' or b like 'ab';
a	b
2	ab
select * from t1 where b like 'abc';
a	b
3	abc
select * from t1 where b like 'abc' or b like 'abc';
a	b
3	abc
set @@optimizer_switch = 'engine_condition_pushdown=on';
select * from t1 where b like 'ab';
a	b
2	ab
select * from t1 where b like 'ab' or b like 'ab';
a	b
2	ab
select * from t1 where b like 'abc';
a	b
3	abc
select * from t1 where b like 'abc' or b like 'abc';
a	b
3	abc
drop table t1;
create table t1 (a int, b char(3), primary key using hash(a))
engine=ndb;
insert into t1 values (1,'a'), (2,'ab'), (3,'abc');
set @@optimizer_switch='engine_condition_pushdown=off';
select * from t1 where b like 'ab';
a	b
2	ab
select * from t1 where b like 'ab' or b like 'ab';
a	b
2	ab
select * from t1 where b like 'abc';
a	b
3	abc
select * from t1 where b like 'abc' or b like 'abc';
a	b
3	abc
set @@optimizer_switch = 'engine_condition_pushdown=on';
select * from t1 where b like 'ab';
a	b
2	ab
select * from t1 where b like 'ab' or b like 'ab';
a	b
2	ab
select * from t1 where b like 'abc';
a	b
3	abc
select * from t1 where b like 'abc' or b like 'abc';
a	b
3	abc
drop table t1;
create table  t1 ( fname varchar(255), lname varchar(255) )
engine=ndbcluster;
insert into t1 values ("Young","Foo");
set @@optimizer_switch = 'engine_condition_pushdown=off';
SELECT fname, lname FROM t1 WHERE (fname like 'Y%') or (lname like 'F%');
fname	lname
Young	Foo
set @@optimizer_switch = 'engine_condition_pushdown=on';
SELECT fname, lname FROM t1 WHERE (fname like 'Y%') or (lname like 'F%');
fname	lname
Young	Foo
insert into t1 values ("aaa", "aaa");
insert into t1 values ("bbb", "bbb");
insert into t1 values ("ccc", "ccc");
insert into t1 values ("ddd", "ddd");
set @@optimizer_switch = 'engine_condition_pushdown=off';
SELECT fname, lname FROM t1 WHERE (fname like 'Y%') or (lname like 'F%');
fname	lname
Young	Foo
set @@optimizer_switch = 'engine_condition_pushdown=on';
SELECT fname, lname FROM t1 WHERE (fname like 'Y%') or (lname like 'F%');
fname	lname
Young	Foo
drop table t1;
CREATE TABLE NodeAlias (
id int(10) unsigned NOT NULL AUTO_INCREMENT,
nodeId int(10) unsigned NOT NULL,
displayName varchar(45) DEFAULT NULL,
aliasKey varchar(45) DEFAULT NULL,
objectVersion int(10) unsigned NOT NULL DEFAULT '0',
changed timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
PRIMARY KEY (id),
KEY NodeAlias_identifies_1_Node (nodeId),
KEY NodeAlias_KeyIndex (aliasKey)
) engine=ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
insert into NodeAlias VALUES(null, 2 , '49', '49',  0,'2008-03-07 14:54:59');
insert into NodeAlias VALUES(null, 3 , '49' , '49' , 0 , '2008-03-07 14:55:24');
insert into NodeAlias VALUES(null, 4 , '49' , '49' , 0 , '2008-03-07 14:55:51');
insert into NodeAlias VALUES(null, 5 , '150' , '150' , 0 , '2008-03-10 10:48:30');
insert into NodeAlias VALUES(null, 6 , '154' , '154' , 0 , '2008-03-10 10:48:43');
insert into NodeAlias VALUES(null, 7 , '158' , '158' , 0 , '2008-03-10 10:48:57');
insert into NodeAlias VALUES(null, 8 , '491803%' , '491803%' , 0 , '2008-03-10
12:22:26');
Warnings:
Warning	4095	Delimiter '\n' in position 10 in datetime value '2008-03-10
12:22:26' at row 1 is deprecated. Prefer the standard ' '.
explain select * from nodealias where (aliasKey LIKE '491803%');
EXPLAIN
-> Table scan on nodealias, with pushed condition: (nodealias.aliasKey like '491803%')  (rows=3)

select * from NodeAlias where (aliasKey LIKE '491803%') order by id;
id	nodeId	displayName	aliasKey	objectVersion	changed
7	8	491803%	491803%	0	2008-03-10 12:22:26
explain select * from nodealias where ('4918031215220' LIKE aliasKey OR aliasKey LIKE '4918031215220');
EXPLAIN
-> Filter: (('4918031215220' like nodealias.aliasKey) or (nodealias.aliasKey like '4918031215220'))  (rows=1.47)
    -> Table scan on nodealias  (rows=7)

select * from NodeAlias where ('4918031215220' LIKE aliasKey OR aliasKey LIKE '4918031215220') order by id;
id	nodeId	displayName	aliasKey	objectVersion	changed
7	8	491803%	491803%	0	2008-03-10 12:22:26
drop table NodeAlias;
create table t1 (a int, b int, c int, d int, primary key using hash(a))
engine=ndbcluster;
insert into t1 values (10,1,100,0+0x1111);
insert into t1 values (20,2,200,0+0x2222);
insert into t1 values (30,3,300,0+0x3333);
insert into t1 values (40,4,400,0+0x4444);
insert into t1 values (50,5,500,0+0x5555);
set @@optimizer_switch = 'engine_condition_pushdown=on';
select a,b,d from t1
where b in (0,1,2,5)
order by b;
a	b	d
10	1	4369
20	2	8738
50	5	21845
-- big filter just below limit
a	b	d
10	1	4369
20	2	8738
50	5	21845
-- big filter just above limit
a	b	d
10	1	4369
20	2	8738
50	5	21845
Warnings:
Warning	4294	Scan filter is too large, discarded
drop table t1;
create table t1 (a int primary key, b varchar(5000) character set latin1)
engine=ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t1 values (0, 'I just cant beg you, any-more');
select * from t1 where b="value";
a	b
drop table t1;
create table t1 (a int primary key, b varchar(5000) character set latin1) engine=ndb;
insert into t1 values(0, 'Edinburgh'),(1, 'Glasgow'),(2,'Aberdeen');
select * from t1 where b in ('0', '1', '2','3','4','5','6','7','8','9',
'10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', 'Aberdeen');
a	b
2	Aberdeen
show warnings;
Level	Code	Message
create table balerno (
a int primary key,
b varchar(2000),
c varchar(2000)
) engine=ndb character set latin1;
alter table balerno add index (b);
show warnings;
Level	Code	Message
insert into balerno values (1, repeat('BA', 1000), repeat('CA', 1000));
insert into balerno values (2, repeat('BB', 1000), repeat('CB', 1000));
insert into balerno values (3, repeat('BC', 1000), repeat('CC', 1000));
insert into balerno values (4, repeat('BD', 1000), repeat('CD', 1000));
insert into balerno values (5, repeat('BE', 1000), repeat('CE', 1000));
set @@optimizer_switch = 'engine_condition_pushdown=on';
select a from balerno where b in (
repeat('10', 1000),
repeat('11', 1000),
repeat('12', 1000),
repeat('13', 1000),
repeat('14', 1000),
repeat('15', 1000),
repeat('16', 1000),
repeat('17', 1000),
repeat('18', 1000),
repeat('19', 1000),
repeat('20', 1000),
repeat('21', 1000),
repeat('22', 1000),
repeat('23', 1000),
repeat('24', 1000),
repeat('25', 1000),
repeat('26', 1000),
repeat('27', 1000),
repeat('28', 1000),
repeat('29', 1000),
repeat('30', 1000),
repeat('31', 1000),
repeat('32', 1000),
repeat('33', 1000),
repeat('34', 1000),
repeat('35', 1000),
repeat('36', 1000),
repeat('37', 1000),
repeat('38', 1000),
repeat('BA', 1000));
a
1
show warnings;
Level	Code	Message
select a from balerno ignore index(b) where b in (
repeat('10', 1000),
repeat('11', 1000),
repeat('12', 1000),
repeat('13', 1000),
repeat('14', 1000),
repeat('15', 1000),
repeat('16', 1000),
repeat('17', 1000),
repeat('18', 1000),
repeat('19', 1000),
repeat('20', 1000),
repeat('21', 1000),
repeat('22', 1000),
repeat('23', 1000),
repeat('24', 1000),
repeat('25', 1000),
repeat('26', 1000),
repeat('27', 1000),
repeat('28', 1000),
repeat('29', 1000),
repeat('30', 1000),
repeat('31', 1000),
repeat('32', 1000),
repeat('33', 1000),
repeat('34', 1000),
repeat('35', 1000),
repeat('36', 1000),
repeat('37', 1000),
repeat('38', 1000),
repeat('BA', 1000));
a
1
show warnings;
Level	Code	Message
set @@optimizer_switch='engine_condition_pushdown=off';
select a from balerno where b in (
repeat('10', 1000),
repeat('11', 1000),
repeat('12', 1000),
repeat('13', 1000),
repeat('14', 1000),
repeat('15', 1000),
repeat('16', 1000),
repeat('17', 1000),
repeat('18', 1000),
repeat('19', 1000),
repeat('20', 1000),
repeat('21', 1000),
repeat('22', 1000),
repeat('23', 1000),
repeat('24', 1000),
repeat('25', 1000),
repeat('26', 1000),
repeat('27', 1000),
repeat('28', 1000),
repeat('29', 1000),
repeat('30', 1000),
repeat('31', 1000),
repeat('32', 1000),
repeat('33', 1000),
repeat('34', 1000),
repeat('35', 1000),
repeat('36', 1000),
repeat('37', 1000),
repeat('38', 1000),
repeat('BA', 1000));
a
1
show warnings;
Level	Code	Message
drop table balerno;
create table t (pk int primary key, x varchar(1)) engine = ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t values (0,"a");
set @@optimizer_switch='engine_condition_pushdown=off';
select * from t where x <> "aa";
pk	x
0	a
select * from t where "aa" <> x;
pk	x
0	a
select * from t where x between "" and "bb";
pk	x
0	a
select * from t where x not between "" and "bb";
pk	x
select * from t where x in ("","aa","b");
pk	x
select * from t where x not in ("","aa","b");
pk	x
0	a
select * from t where x like "aa?";
pk	x
set @@optimizer_switch = 'engine_condition_pushdown=on';
explain select * from t where x <> "aa";
EXPLAIN
-> Filter: (t.x <> 'aa')  (rows=1.8)
    -> Table scan on t  (rows=2)

select * from t where x <> "aa";
pk	x
0	a
explain select * from t where "aa" <> x;
EXPLAIN
-> Filter: ('aa' <> t.x)  (rows=1.8)
    -> Table scan on t  (rows=2)

select * from t where "aa" <> x;
pk	x
0	a
explain select * from t where x between "" and "bb";
EXPLAIN
-> Filter: (t.x between '' and 'bb')  (rows=0.222)
    -> Table scan on t  (rows=2)

select * from t where x between "" and "bb";
pk	x
0	a
explain select * from t where x not between "" and "bb";
EXPLAIN
-> Filter: (t.x not between '' and 'bb')  (rows=1.78)
    -> Table scan on t  (rows=2)

select * from t where x not between "" and "bb";
pk	x
explain select * from t where x in ("","aa","b");
EXPLAIN
-> Filter: (t.x in ('','aa','b'))  (rows=0.6)
    -> Table scan on t  (rows=2)

select * from t where x in ("","aa","b");
pk	x
explain select * from t where x not in ("","aa","b");
EXPLAIN
-> Filter: (t.x not in ('','aa','b'))  (rows=1.4)
    -> Table scan on t  (rows=2)

select * from t where x not in ("","aa","b");
pk	x
0	a
explain select * from t where x like "aa?";
EXPLAIN
-> Table scan on t, with pushed condition: (t.x like 'aa?')  (rows=0.222)

select * from t where x like "aa?";
pk	x
explain select * from t where x not like "aa?";
EXPLAIN
-> Table scan on t, with pushed condition: (not((t.x like 'aa?')))  (rows=1.78)

select * from t where x not like "aa?";
pk	x
0	a
select * from t where x like "%a%";
pk	x
0	a
select * from t where x not like "%b%";
pk	x
0	a
select * from t where x like replace(concat("%", "b%"),"b","a");
pk	x
0	a
select * from t where x not like replace(concat("%", "a%"),"a","b");
pk	x
0	a
select * from t where x like concat("%", replace("b%","b","a"));
pk	x
0	a
select * from t where x not like concat("%", replace("a%","a","b"));
pk	x
0	a
drop table t;
create table t (pk int primary key, x int) engine = ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t values (0,0),(1,1),(2,2),(3,3),(4,4),(5,5);
set @@optimizer_switch = 'engine_condition_pushdown=on';
explain select * from t where 3 between 1+1 and x order by pk;
EXPLAIN
-> Sort: t.pk  (rows=0.667)
    -> Table scan on t, with pushed condition: (3 between <cache>((1 + 1)) and t.x)  (rows=0.667)

select * from t where 3 between 1+1 and x order by pk;
pk	x
3	3
4	4
5	5
explain select * from t where 3 between -1 and x order by pk;
EXPLAIN
-> Sort: t.pk  (rows=0.667)
    -> Table scan on t, with pushed condition: (3 between <cache>(-(1)) and t.x)  (rows=0.667)

select * from t where 3 between -1 and x order by pk;
pk	x
3	3
4	4
5	5
drop table t;
set @@optimizer_switch = 'engine_condition_pushdown=on';
create table t (x enum ('yes','yep','no')) engine = ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t values ('yes'),('yep'),('no');
explain select * from t where x like 'yes' order by x;
EXPLAIN
-> Sort: t.x  (rows=1)
    -> Filter: (t.x like 'yes')  (rows=1)
        -> Table scan on t  (rows=3)

select * from t where x like 'yes' order by x;
x
yes
explain select * from t where x like 'ye%' order by x;
EXPLAIN
-> Sort: t.x  (rows=1)
    -> Filter: (t.x like 'ye%')  (rows=1)
        -> Table scan on t  (rows=3)

select * from t where x like 'ye%' order by x;
x
yes
yep
explain select * from t where x not like 'ye%' order by x;
EXPLAIN
-> Sort: t.x  (rows=2)
    -> Filter: (not((t.x like 'ye%')))  (rows=2)
        -> Table scan on t  (rows=3)

select * from t where x not like 'ye%' order by x;
x
no
drop table t;
create table tx (
a int not null,
b int not null,
c int not null,
d int not null,
primary key (`a`,`b`)
) engine = ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
explain select * from tx join tx as t2 on tx.c=1 where t2.c=1;
EXPLAIN
-> Inner hash join (no condition)  (rows=0.04)
    -> Table scan on tx, with pushed condition: (tx.c = 1)  (rows=0.2)
    -> Hash
        -> Table scan on t2, with pushed condition: (t2.c = 1)  (rows=0.2)

Warnings:
Note	1003	Can't push table 'tx' as child, 'type' must be a 'ref' access
explain
select straight_join *
from tx
join tx as t2 on t2.a = tx.a and t2.b = tx.b
join tx as t3 on t3.a = tx.c and t3.b = tx.d
join tx as t4 on t4.a = t3.b and t4.b = t2.c;
EXPLAIN
-> Inner hash join (tx.d = t4.a), (t4.b = t2.c)  (rows=16e-6)
    -> Table scan on t4  (rows=2)
    -> Hash
        -> Inner hash join (tx.d = t3.b), (t3.a = tx.c)  (rows=800e-6)
            -> Table scan on t3  (rows=2)
            -> Hash
                -> Nested loop inner join  (rows=0.04)
                    -> Table scan on tx, activating pushed join of 2 tables  (rows=2)
                    -> Single-row index lookup on t2 using PRIMARY (a = tx.a, b = tx.b), child of tx in pushed join  (rows=0.02)

Warnings:
Note	1003	Can't push table 't3' as child, 'type' must be a 'ref' access
Note	1003	Can't push table 't4' as child, 'type' must be a 'ref' access
explain
select t2.c, count(distinct t2.a)
from tx
join tx as t2 on tx.a = t2.c and tx.b = t2.d
where t2.a = 4
group by t2.c;
EXPLAIN
-> Group aggregate: count(distinct t2.a)  (rows=0.04)
    -> Sort: tx.a  (rows=0.04)
        -> Nested loop inner join  (rows=0.04)
            -> Table scan on t2, activating pushed join of 2 tables, with pushed condition: (t2.a = 4)  (rows=2)
            -> Single-row index lookup on tx using PRIMARY (a = t2.c, b = t2.d), child of t2 in pushed join  (rows=0.02)

explain select * from tx join tx as t2 on tx.c=1 where t2.c=1;
EXPLAIN
-> Inner hash join (no condition)  (rows=0.04)
    -> Table scan on tx, with pushed condition: (tx.c = 1)  (rows=0.2)
    -> Hash
        -> Table scan on t2, with pushed condition: (t2.c = 1)  (rows=0.2)

Warnings:
Note	1003	Can't push table 'tx' as child, 'type' must be a 'ref' access
explain
select t2.c, count(distinct t2.a)
from tx
join tx as t2 on tx.a = t2.c and tx.b = t2.d
where t2.a = 4
group by t2.c;
EXPLAIN
-> Group aggregate: count(distinct t2.a)  (rows=0.04)
    -> Sort: tx.a  (rows=0.04)
        -> Nested loop inner join  (rows=0.04)
            -> Table scan on t2, activating pushed join of 2 tables, with pushed condition: (t2.a = 4)  (rows=2)
            -> Single-row index lookup on tx using PRIMARY (a = t2.c, b = t2.d), child of t2 in pushed join  (rows=0.02)

drop table tx;
set @@optimizer_switch = 'engine_condition_pushdown=on';
create table t (pk int, i int) engine = ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t values (1,3), (3,6), (6,9), (9,1);
create table subq (pk int, i int) engine = ndb
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into subq values (1,3), (3,6), (6,9), (9,1);
explain
select * from t where exists
(select * from t as subq where subq.i=3 and t.i=3);
EXPLAIN
-> Nested loop inner join (FirstMatch)  (rows=0.16)
    -> Limit: 1 row(s)  (rows=0.4)
        -> Table scan on subq, with pushed condition: (subq.i = 3)  (rows=0.4)
    -> Table scan on t, with pushed condition: (t.i = 3)  (rows=0.4)

Warnings:
Note	1276	Field or reference 'test.t.i' of SELECT #2 was resolved in SELECT #1
Note	1003	Can't push table 't' as child, 'type' must be a 'ref' access
explain
select * from t where exists
(select * from subq where subq.i=3 and t.i=3);
EXPLAIN
-> Nested loop inner join (FirstMatch)  (rows=0.16)
    -> Limit: 1 row(s)  (rows=0.4)
        -> Table scan on subq, with pushed condition: (subq.i = 3)  (rows=0.4)
    -> Table scan on t, with pushed condition: (t.i = 3)  (rows=0.4)

Warnings:
Note	1276	Field or reference 'test.t.i' of SELECT #2 was resolved in SELECT #1
Note	1003	Can't push table 't' as child, 'type' must be a 'ref' access
select * from t where exists
(select * from t as subq where subq.i=3 and t.i=3);
pk	i
1	3
select * from t where exists
(select * from subq where subq.i=3 and t.i=3);
pk	i
1	3
drop table t,subq;
create table t (pk1 int, pk2 int, primary key(pk1,pk2)) engine = ndb;
insert into t values (1,0), (2,0), (3,0), (4,0);
set @@optimizer_switch='engine_condition_pushdown=on';
select table1.pk1, table2.pk1, table1.pk2, table2.pk2
from t as table1, t as table2
where table2.pk1 in (0,3) and
(table1.pk1 = 7 or table2.pk1 = 3);
pk1	pk1	pk2	pk2
1	3	0	0
2	3	0	0
3	3	0	0
4	3	0	0
drop table t;
create table mytable(i int, s varchar(255) ) engine = ndb;
insert into mytable values(0,"Text Hej"),(1, "xText aaja");
set @@optimizer_switch = 'engine_condition_pushdown=on';
select * from mytable where s like concat("%Text","%") or s like concat("%Text","%") order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s like concat("%Text","%") or s like "%Text%" order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s like concat("%Text","%") or s like concat("%Text1","%") order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s like concat("%Text","%") or s like "%Text1%" order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s not like concat("%Text","%") or s not like concat("%Text","%") order by i;
i	s
select * from mytable where s not like concat("%Text1","%") or s not like concat("%Text","%") order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s like concat("%Text","%") or s not like "%Text%" order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s like concat("%Text1","%") or s not like "%Text%" order by i;
i	s
select * from mytable where s like concat("%Text","%") and s like concat("%Text","%") order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s like concat("%Text","%") and s like "%Text%" order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s like concat("%Text","%") and s like concat("%Text1","%") order by i;
i	s
select * from mytable where s like concat("%Text","%") and s like "%Text1%" order by i;
i	s
select * from mytable where s not like concat("%Text","%") and s not like concat("%Text","%") order by i;
i	s
select * from mytable where s not like concat("%Text","%") and s not like concat("%Text1","%") order by i;
i	s
select * from mytable where s like concat("%Text","%") and s not like "%Text%" order by i;
i	s
select * from mytable where s like concat("%Text","%") and s not like "%Text1%" order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s like replace(concat("%Xext","%"),"X", "T") order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s not like replace(concat("%Text","%"),"T", "X") order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s like concat(replace("%Xext","X", "T"),"%") order by i;
i	s
0	Text Hej
1	xText aaja
select * from mytable where s not like concat(replace("%Text","T", "X"),"%") order by i;
i	s
0	Text Hej
1	xText aaja
drop table mytable;
create table mytab(a char(20),b char(20),
key a (a)) engine=ndbcluster default charset=latin1;
insert into mytab values (null,null),(-1,1);
select b from mytab where a like -1 having `b` like 1;
b
1
drop table mytab;
create table t(a bigint unsigned not null primary key auto_increment, b varchar(100)) character set utf8mb3 engine ndb;
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
insert into t (b) values('abc'),('aaa'),('bbb'),('ccc');
select * from t where b like 'a%';
a	b
1	abc
2	aaa
select * from t where b not like 'a%';
a	b
3	bbb
4	ccc
drop table t;
create table escapetest ( emailaddress varchar(255) default null, id int not
null default '0') engine=ndbcluster
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into escapetest values('test_data@test.org', 1);
explain select * from escapetest where emailaddress like "test_%";
EXPLAIN
-> Table scan on escapetest, with pushed condition: (escapetest.emailaddress like 'test_%')  (rows=0.222)

select * from escapetest where emailaddress like "test_%";
emailaddress	id
test_data@test.org	1
explain select * from escapetest where emailaddress like "test|_%" escape '|';
EXPLAIN
-> Filter: (escapetest.emailaddress like 'test|_%' escape '|')  (rows=0.222)
    -> Table scan on escapetest  (rows=2)

select * from escapetest where emailaddress like "test|_%" escape '|';
emailaddress	id
test_data@test.org	1
drop table escapetest;
create table a(a varchar(7)) engine=ndb charset=utf8mb3
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
insert into a values ('abcdefg');
select * from a;
a
abcdefg
explain select * from a where a like 'abcdefg%';
EXPLAIN
-> Table scan on a, with pushed condition: (a.a like 'abcdefg%')  (rows=0.222)

select * from a where a like 'abcdefg%';
a
abcdefg
drop table a;
set @@session.optimizer_switch = @old_ecpd;
DROP TABLE t1,t2,t3,t4,t5;
#
# Bug#14106592  DEBUG BUILD CRASH IN NDB_SERIALIZE_COND()
#
create table t1(a time) engine=ndbcluster;
insert into t1 values ('00:00:00'),('01:01:01');
select 1 from t1 where a >= NULL;
1
drop table t1;
#
# BUG#14798022 "CHAR (0)" DATATYPE CAUSING ERROR 1296
# Verify there is no push down support for char(0)
#
create table t1(a int, b char(0)) engine=ndbcluster
comment="NDB_TABLE=PARTITION_BALANCE=FOR_RP_BY_LDM";
insert into t1 values(1,''), (2, NULL);
explain select * from t1 where b = '';
EXPLAIN
-> Filter: (t1.b = '')  (rows=0.2)
    -> Table scan on t1  (rows=2)

select * from t1 where b = '';
a	b
1	
drop table t1;
#
# Bug#28610217 RESULT ROWS ARE MISSING WHEN ENUM COMPARISON PREDICATES ARE PUSHED
#
# Enum values should be compared by their textual values,
# not by their internal 'index' value.
# As the storage engine only know the index value of the
# enum values, we cant compare them by '>' and '<' in the SE.
#
create table t1 (
options enum('one','two','three','four','five') not null
) engine=ndb;
insert into t1(options) values ('one'),('two'),('three'),('four'),('five');
Enum comparison by '<' / '>' should not be pushed
explain select * from t1 where options between 'one' and 'three' order by options;
EXPLAIN
-> Sort: t1.`options`  (rows=1)
    -> Filter: (t1.`options` between 'one' and 'three')  (rows=1)
        -> Table scan on t1  (rows=5)

explain select * from t1 where options >= 'one' order by options;
EXPLAIN
-> Sort: t1.`options`  (rows=1.67)
    -> Filter: (t1.`options` >= 'one')  (rows=1.67)
        -> Table scan on t1  (rows=5)

explain select * from t1 where options <= 'three' order by options;
EXPLAIN
-> Sort: t1.`options`  (rows=1.67)
    -> Filter: (t1.`options` <= 'three')  (rows=1.67)
        -> Table scan on t1  (rows=5)

explain select * from t1 where options > 'one' order by options;
EXPLAIN
-> Sort: t1.`options`  (rows=1.67)
    -> Filter: (t1.`options` > 'one')  (rows=1.67)
        -> Table scan on t1  (rows=5)

explain select * from t1 where options < 'three' order by options;
EXPLAIN
-> Sort: t1.`options`  (rows=1.67)
    -> Filter: (t1.`options` < 'three')  (rows=1.67)
        -> Table scan on t1  (rows=5)

select * from t1 where options between 'one' and 'three' order by options;
options
one
three
select * from t1 where options >= 'one' order by options;
options
one
two
three
select * from t1 where options <= 'three' order by options;
options
one
three
four
five
select * from t1 where options > 'one' order by options;
options
two
three
select * from t1 where options < 'three' order by options;
options
one
four
five
Equalities and IN-lists should be pushed
explain select * from t1 where options = 'one' order by options;
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.`options` = 'one')  (rows=1)

explain select * from t1 where options <> 'one' order by options;
EXPLAIN
-> Sort: t1.`options`  (rows=4)
    -> Table scan on t1, with pushed condition: (t1.`options` <> 'one')  (rows=4)

explain select * from t1 where options IN ('one','four','two','zero') order by options;
EXPLAIN
-> Sort: t1.`options`  (rows=2.5)
    -> Table scan on t1, with pushed condition: (t1.`options` in ('one','four','two','zero'))  (rows=2.5)

explain select * from t1 where options NOT IN ('one','four','two','zero') order by options;
EXPLAIN
-> Sort: t1.`options`  (rows=2.5)
    -> Table scan on t1, with pushed condition: (t1.`options` not in ('one','four','two','zero'))  (rows=2.5)

select * from t1 where options = 'one' order by options;
options
one
select * from t1 where options <> 'one' order by options;
options
two
three
four
five
select * from t1 where options IN ('one','four','two','zero') order by options;
options
one
two
four
select * from t1 where options NOT IN ('one','four','two','zero') order by options;
options
three
five
drop table t1;
#
# Bug#28643463 NULL VALUES NOT FILTERED OUT BY PUSHED CONDITIONS
#
Testing: '= 'five''
result_rows	filtered_rows
1	1
Testing: '<> 'five''
result_rows	filtered_rows
4	4
Testing: '< 'five''
result_rows	filtered_rows
0	0
Testing: '> 'five''
result_rows	filtered_rows
4	4
Testing: '<= 'five''
result_rows	filtered_rows
1	1
Testing: '>= 'five''
result_rows	filtered_rows
5	5
Testing: 'like 'five''
result_rows	filtered_rows
1	1
Testing: 'not like 'five''
result_rows	filtered_rows
4	4
Testing: 'not <column> like 'five''
result_rows	filtered_rows
4	4
Testing: 'not <column> not like 'five''
result_rows	filtered_rows
1	1
#
# WL#14476 Introduce NdbScanFilter option for NULL-compare according to SQL semantics
#
# Test case for checking the pre-WL behaviour. Disable NULL semantics added
# by WL -> force old behaviour of still needing explicit NULL check.
#
# Test cases are the same as added for Bug#28643463 above.
#
Testing: '= 'five''
result_rows	filtered_rows
1	1
Testing: '<> 'five''
result_rows	filtered_rows
4	4
Testing: '< 'five''
result_rows	filtered_rows
0	0
Testing: '> 'five''
result_rows	filtered_rows
4	4
Testing: '<= 'five''
result_rows	filtered_rows
1	1
Testing: '>= 'five''
result_rows	filtered_rows
5	5
Testing: 'like 'five''
result_rows	filtered_rows
1	1
Testing: 'not like 'five''
result_rows	filtered_rows
4	4
Testing: 'not <column> like 'five''
result_rows	filtered_rows
4	4
Testing: 'not <column> not like 'five''
result_rows	filtered_rows
1	1
#
# Bug#29231709 NULL VALUES (still) NOT FILTERED OUT BY PUSHED CONDITIONS
#
Testing: ''five' ='
result_rows	filtered_rows
1	1
Testing: ''five' <>'
result_rows	filtered_rows
4	4
Testing: ''five' >'
result_rows	filtered_rows
0	0
Testing: ''five' <'
result_rows	filtered_rows
4	4
Testing: ''five' >='
result_rows	filtered_rows
1	1
Testing: ''five' <='
result_rows	filtered_rows
5	5
#
# Bug#29232744 NULL VALUES NOT FILTERED OUT BY PUSHED
#              'NOT IN/BETWEEN' PREDICATES
#
Testing: '<field> between'
result_rows	filtered_rows
3	3
Testing: '<field> not between'
result_rows	filtered_rows
2	2
Testing: 'not <field> between'
result_rows	filtered_rows
2	2
Testing: '<field> in (...)'
result_rows	filtered_rows
3	3
Testing: '<field> not in (...)'
result_rows	filtered_rows
2	2
Testing: 'not <field> in (...)'
result_rows	filtered_rows
2	2
#
# Bug#29699347 ITEM_FLOAT C'TOR DOES NOT SET MAX_LENGTH MEMBER
#
Creating baseline, returning all 8 rows
result_rows	filtered_rows
8	8
Testing filtering of data type 'real', returning 6 rows.
result_rows	filtered_rows
6	6
Testing filtering of data type 'double', returning 6 rows.
result_rows	filtered_rows
6	6
#
# Bug#29054626 TRUNCATION OF OUT OF RANGE VALUES IN PUSHED CONDITION -> INCORRECT RESULT
#
CREATE TABLE t1 (
ushort smallint unsigned NOT NULL,
date_field date
) engine=ndb;
insert into t1 values
(1, '1901-01-01'),
(2, '1902-02-02'),
(3, '1903-03-03'),
(4, '1904-04-04');
update t1 set ushort=65535;
# save_in_field() will truncate 999999 to MAX_UINT(65535)
# The truncated warning is ignored, and we effectively compared
# against 65535 below.
explain
select * from t1 where ushort <= 999999;
EXPLAIN
-> Table scan on t1  (rows=4)

select * from t1 where ushort <= 999999;
ushort	date_field
65535	1901-01-01
65535	1902-02-02
65535	1903-03-03
65535	1904-04-04
explain
select * from t1 where ushort < 999999;
EXPLAIN
-> Table scan on t1  (rows=4)

select * from t1 where ushort < 999999;
ushort	date_field
65535	1901-01-01
65535	1902-02-02
65535	1903-03-03
65535	1904-04-04
explain
select * from t1 where ushort >= 999999;
EXPLAIN
-> Zero rows (Impossible WHERE)  (rows=0)

select * from t1 where ushort >= 999999;
ushort	date_field
explain
select * from t1 where ushort = 999999;
EXPLAIN
-> Zero rows (Impossible WHERE)  (rows=0)

select * from t1 where ushort = 999999;
ushort	date_field
# Similar for other data types. Range for Date is '1000-01-01' to '9999-12-31'.
# Seems to be unpredictable which value is actually stored for an
# out of range value. Anyway the result was not as expected.
# This was made obsolete when we started rejecting invalid dates
set @@optimizer_switch = 'engine_condition_pushdown=off';
explain
select * from t1 where date_field < '9999-99-99';
ERROR HY000: Incorrect DATE value: '9999-99-99'
select * from t1 where date_field < '9999-99-99';
ERROR HY000: Incorrect DATE value: '9999-99-99'
explain
select * from t1 where date_field > '9999-99-99';
ERROR HY000: Incorrect DATE value: '9999-99-99'
select * from t1 where date_field > '9999-99-99';
ERROR HY000: Incorrect DATE value: '9999-99-99'
set @@optimizer_switch = 'engine_condition_pushdown=on';
explain
select * from t1 where date_field < '9999-99-99';
ERROR HY000: Incorrect DATE value: '9999-99-99'
select * from t1 where date_field < '9999-99-99';
ERROR HY000: Incorrect DATE value: '9999-99-99'
explain
select * from t1 where date_field > '9999-99-99';
ERROR HY000: Incorrect DATE value: '9999-99-99'
select * from t1 where date_field > '9999-99-99';
ERROR HY000: Incorrect DATE value: '9999-99-99'
#
# Bug#29058732 CONDITION PUSHDOWN INCORRECTLY REJECTED FOR TEMPORAL DATA TYPES
# Condition pushdown incorrectly depended on whether the date_field was
# specified before or after the string constant.
#
explain
select * from t1 where
'1999-01-01' >= date_field ;
EXPLAIN
-> Table scan on t1, with pushed condition: (DATE'1999-01-01' >= t1.date_field)  (rows=1.33)

explain
select * from t1 where
date_field <= '1999-01-01';
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.date_field <= DATE'1999-01-01')  (rows=1.33)

explain
select * from t1 where
date '1999-01-01' >= date_field ;
EXPLAIN
-> Table scan on t1, with pushed condition: (DATE'1999-01-01' >= t1.date_field)  (rows=1.33)

explain
select * from t1 where
date_field <= date '1999-01-01';
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.date_field <= DATE'1999-01-01')  (rows=1.33)

drop table t1;
#########################################################
# WL#12686: Enable condition pushdown of field references
#   to previous tables in the query plan.
#########################################################
create table t1 (
a int,
b int,
c int,
d int
) engine=ndbcluster;
insert into t1 values
(1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4),
(1,2,5,1), (1,3,1,2), (1,4,2,3),
(2,1,3,4), (2,3,4,5), (2,4,5,1),
(3,1,1,2), (3,2,2,3), (3,4,3,4),
(4,1,4,5), (4,2,5,1), (4,3,1,2);
set optimizer_switch='block_nested_loop=off';
explain
select *
from t1 straight_join t1 as t2
on t2.d = t1.d;
EXPLAIN
-> Inner hash join (t2.d = t1.d)  (rows=25.6)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on t2.a = t1.c and t2.d = t1.d;
EXPLAIN
-> Inner hash join (t2.a = t1.c), (t2.d = t1.d)  (rows=2.56)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on t2.a = t1.c or t2.d = t1.d;
EXPLAIN
-> Inner hash join (no condition), extra conditions: ((t2.a = t1.c) or (t2.d = t1.d))  (rows=48.6)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select * from t1
straight_join t1 as t2 on t2.d = t1.d
straight_join t1 as t3 on t3.a = t2.c and t3.d = t1.c;
EXPLAIN
-> Inner hash join (t3.a = t2.c), (t3.d = t1.c)  (rows=4.1)
    -> Table scan on t3  (rows=16)
    -> Hash
        -> Inner hash join (t2.d = t1.d)  (rows=25.6)
            -> Table scan on t2  (rows=16)
            -> Hash
                -> Table scan on t1  (rows=16)

explain
select * from t1
straight_join t1 as t2 on t2.d = t1.d
straight_join t1 as t3 on t3.a = t2.c or t3.d = t1.c;
EXPLAIN
-> Inner hash join (no condition), extra conditions: ((t3.a = t2.c) or (t3.d = t1.c))  (rows=410)
    -> Table scan on t3  (rows=16)
    -> Hash
        -> Inner hash join (t2.d = t1.d)  (rows=25.6)
            -> Table scan on t2  (rows=16)
            -> Hash
                -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t2.d = 1 or t1.d = t2.d);
EXPLAIN
-> Inner hash join (no condition), extra conditions: ((t2.d = 1) or (t1.d = t2.d))  (rows=256)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t2.d = 1 or t1.d = 1);
EXPLAIN
-> Inner hash join (no condition), extra conditions: ((t2.d = 1) or (t1.d = 1))  (rows=256)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t2.d = 1 or 1 = t1.d);
EXPLAIN
-> Inner hash join (no condition), extra conditions: ((t2.d = 1) or (t1.d = 1))  (rows=256)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t1.d = 1 or 1 = t2.d);
EXPLAIN
-> Inner hash join (no condition), extra conditions: ((t1.d = 1) or (t2.d = 1))  (rows=256)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (1 = t1.d or t2.d = 1);
EXPLAIN
-> Inner hash join (no condition), extra conditions: ((t1.d = 1) or (t2.d = 1))  (rows=256)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t2.d = 1 or t1.c = t1.b);
EXPLAIN
-> Inner hash join (no condition), extra conditions: ((t2.d = 1) or (t1.c = t1.b))  (rows=256)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t2.d = t1.d or t1.c = t1.b);
EXPLAIN
-> Inner hash join (no condition), extra conditions: ((t2.d = t1.d) or (t1.c = t1.b))  (rows=48.6)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t2.d = t2.c);
EXPLAIN
-> Inner hash join (no condition)  (rows=256)
    -> Table scan on t2, with pushed condition: (t2.d = t2.c)  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t1.a between t2.a and t2.b);
EXPLAIN
-> Inner hash join (no condition), extra conditions: (t1.a between t2.a and t2.b)  (rows=28.4)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t2.a between t1.a and t1.b);
EXPLAIN
-> Inner hash join (no condition), extra conditions: (t2.a between t1.a and t1.b)  (rows=28.4)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

explain
select *
from t1 straight_join t1 as t2
on (t2.a between t1.a and t2.b);
EXPLAIN
-> Inner hash join (no condition), extra conditions: (t2.a between t1.a and t2.b)  (rows=28.4)
    -> Table scan on t2  (rows=16)
    -> Hash
        -> Table scan on t1  (rows=16)

delete from t1;
insert into t1 values (1,1,1,1), (2, 2, NULL, NULL);
explain
select *
from t1 straight_join t1 as t2
on t2.d = t1.d;
EXPLAIN
-> Inner hash join (t2.d = t1.d)  (rows=0.4)
    -> Table scan on t2  (rows=2)
    -> Hash
        -> Table scan on t1  (rows=2)

select *
from t1 straight_join t1 as t2
on t2.d = t1.d;
a	b	c	d	a	b	c	d
1	1	1	1	1	1	1	1
select *
from t1 straight_join t1 as t2
on t2.d = t1.d or t2.a = t1.a;
a	b	c	d	a	b	c	d
1	1	1	1	1	1	1	1
2	2	NULL	NULL	2	2	NULL	NULL
select *
from t1 straight_join t1 as t2
on t2.a = t1.a or t2.d = t1.d;
a	b	c	d	a	b	c	d
1	1	1	1	1	1	1	1
2	2	NULL	NULL	2	2	NULL	NULL
select *
from t1 straight_join t1 as t2
on t2.d <> t1.d;
a	b	c	d	a	b	c	d
select *
from t1 straight_join t1 as t2
on t2.d < t1.d;
a	b	c	d	a	b	c	d
drop table t1;
create table t1(a int, b char(10), c char(20))
engine=ndbcluster;
insert into t1 values
(1,'1','1'),  (2,'2','2'),
(3,'1%','0123456789abcdef'), (4,null,null), (null,'5','555555555555555'),
(6,'x','x'),  (7,'y','y'),
(8, '0123456789', '01234567890123456789');
explain
select *
from t1 straight_join t1 as t2
on t2.b = t1.b;
EXPLAIN
-> Inner hash join (t2.b = t1.b)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t2.b = t1.c;
EXPLAIN
-> Inner hash join (t2.b = t1.c)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t2.a = t1.b;
EXPLAIN
-> Inner hash join (cast(t2.a as double) = cast(t1.b as double))  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t2.a = t1.c;
EXPLAIN
-> Inner hash join (cast(t2.a as double) = cast(t1.c as double))  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t2.b = t1.c;
EXPLAIN
-> Inner hash join (t2.b = t1.c)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t1.c = t2.b;
EXPLAIN
-> Inner hash join (t1.c = t2.b)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t2.c = t1.b;
EXPLAIN
-> Inner hash join (t2.c = t1.b)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t1.b = t2.c;
EXPLAIN
-> Inner hash join (t1.b = t2.c)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

alter table t1 add column d varchar(20);
update t1 set d = c;
explain
select *
from t1 straight_join t1 as t2
on t2.c = t1.d;
EXPLAIN
-> Inner hash join (t2.c = t1.d)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t1.d = t2.c;
EXPLAIN
-> Inner hash join (t1.d = t2.c)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

alter table t1 drop column d;
alter table t1 add column d varchar(30);
update t1 set d = c;
explain
select *
from t1 straight_join t1 as t2
on t2.c = t1.d;
EXPLAIN
-> Inner hash join (t2.c = t1.d)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t1.d = t2.c;
EXPLAIN
-> Inner hash join (t1.d = t2.c)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

alter table t1 drop column d;
alter table t1 add column d varchar(10);
update t1 set d = substring(c,1,10);
explain
select *
from t1 straight_join t1 as t2
on t2.c = t1.d;
EXPLAIN
-> Inner hash join (t2.c = t1.d)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t1.d = t2.c;
EXPLAIN
-> Inner hash join (t1.d = t2.c)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

alter table t1 drop column d;
alter table t1 add column d char(20) character set latin1 collate latin1_swedish_ci;
update t1 set d = c;
explain
select *
from t1 straight_join t1 as t2
on t2.c = t1.d;
EXPLAIN
-> Inner hash join (t2.c = t1.d)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

explain
select *
from t1 straight_join t1 as t2
on t1.d = t2.c;
EXPLAIN
-> Inner hash join (t1.d = t2.c)  (rows=6.4)
    -> Table scan on t2  (rows=8)
    -> Hash
        -> Table scan on t1  (rows=8)

drop table t1;
set optimizer_switch='block_nested_loop=default';
#
# Bug#29296615 FAILS TO DO PARTIAL PUSH OF PREDICATES INSIDE
#              AN OR'ED CONDITION
#
create table t1 (
a3 int,
b3 int,
c3 int,
d3 int)
engine = ndb;
insert into t1 values (0x1f, 0x2f, 1,    0x1f);
insert into t1 values (0x2f, 0x3f, 2,    0x2f);
insert into t1 values (0x3f, 0x1f, 3,    0x3f);
insert into t1 values (0x40, 0,    null, null);
insert into t1 values (0x41, 0,    null, null);
insert into t1 values (0x42, 0,    4,    null);
insert into t1 values (0x43, 0,    null, 0x43);
explain select * from t1 where c3 > 1;
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.c3 > 1)  (rows=2.33)

explain select * from t1 where c3+1 > 1;
EXPLAIN
-> Filter: ((t1.c3 + 1) > 1)  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where c3 > 1   or c3 < 10;
EXPLAIN
-> Table scan on t1, with pushed condition: ((t1.c3 > 1) or (t1.c3 < 10))  (rows=3.89)

explain select * from t1 where c3+1 > 1 or c3 < 10;
EXPLAIN
-> Filter: (((t1.c3 + 1) > 1) or (t1.c3 < 10))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where c3 > 1   or c3+1 < 10;
EXPLAIN
-> Filter: ((t1.c3 > 1) or ((t1.c3 + 1) < 10))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where c3+1 > 1 or c3+1 < 10;
EXPLAIN
-> Filter: (((t1.c3 + 1) > 1) or ((t1.c3 + 1) < 10))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where (c3 > 1   or c3 < 10) and d3 >= 0;
EXPLAIN
-> Table scan on t1, with pushed condition: ((t1.d3 >= 0) and ((t1.c3 > 1) or (t1.c3 < 10)))  (rows=1.3)

explain select * from t1 where (c3+1 > 1 or c3 < 10) and d3 >= 0;
EXPLAIN
-> Filter: (((t1.c3 + 1) > 1) or (t1.c3 < 10))  (rows=2.33)
    -> Table scan on t1, with pushed condition: (t1.d3 >= 0)  (rows=7)

explain select * from t1 where (c3 > 1   or c3+1 < 10) and d3 >= 0;
EXPLAIN
-> Filter: ((t1.c3 > 1) or ((t1.c3 + 1) < 10))  (rows=2.33)
    -> Table scan on t1, with pushed condition: (t1.d3 >= 0)  (rows=7)

explain select * from t1 where (c3+1 > 1 or c3+1 < 10) and d3 >= 0;
EXPLAIN
-> Filter: (((t1.c3 + 1) > 1) or ((t1.c3 + 1) < 10))  (rows=2.33)
    -> Table scan on t1, with pushed condition: (t1.d3 >= 0)  (rows=7)

explain select * from t1 where (c3 > 1   or c3 < 10) and d3+1 >= 0;
EXPLAIN
-> Filter: ((t1.d3 + 1) >= 0)  (rows=3.89)
    -> Table scan on t1, with pushed condition: ((t1.c3 > 1) or (t1.c3 < 10))  (rows=7)

explain select * from t1 where (c3+1 > 1 or c3 < 10) and d3+1 >= 0;
EXPLAIN
-> Filter: ((((t1.c3 + 1) > 1) or (t1.c3 < 10)) and ((t1.d3 + 1) >= 0))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where (c3 > 1   or c3+1 < 10) and d3+1 >= 0;
EXPLAIN
-> Filter: (((t1.c3 > 1) or ((t1.c3 + 1) < 10)) and ((t1.d3 + 1) >= 0))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where (c3+1 > 1 or c3+1 < 10) and d3+1 >= 0;
EXPLAIN
-> Filter: ((((t1.c3 + 1) > 1) or ((t1.c3 + 1) < 10)) and ((t1.d3 + 1) >= 0))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where d3 >= 0 and (c3 > 1   or c3 < 10);
EXPLAIN
-> Table scan on t1, with pushed condition: ((t1.d3 >= 0) and ((t1.c3 > 1) or (t1.c3 < 10)))  (rows=1.3)

explain select * from t1 where d3 >= 0 and (c3+1 > 1 or c3 < 10);
EXPLAIN
-> Filter: (((t1.c3 + 1) > 1) or (t1.c3 < 10))  (rows=2.33)
    -> Table scan on t1, with pushed condition: (t1.d3 >= 0)  (rows=7)

explain select * from t1 where d3 >= 0 and (c3 > 1   or c3+1 < 10);
EXPLAIN
-> Filter: ((t1.c3 > 1) or ((t1.c3 + 1) < 10))  (rows=2.33)
    -> Table scan on t1, with pushed condition: (t1.d3 >= 0)  (rows=7)

explain select * from t1 where d3 >= 0 and (c3+1 > 1 or c3+1 < 10);
EXPLAIN
-> Filter: (((t1.c3 + 1) > 1) or ((t1.c3 + 1) < 10))  (rows=2.33)
    -> Table scan on t1, with pushed condition: (t1.d3 >= 0)  (rows=7)

explain select * from t1 where d3+1 >= 0 and (c3 > 1   or c3 < 10);
EXPLAIN
-> Filter: ((t1.d3 + 1) >= 0)  (rows=3.89)
    -> Table scan on t1, with pushed condition: ((t1.c3 > 1) or (t1.c3 < 10))  (rows=7)

explain select * from t1 where d3+1 >= 0 and (c3+1 > 1 or c3 < 10);
EXPLAIN
-> Filter: (((t1.d3 + 1) >= 0) and (((t1.c3 + 1) > 1) or (t1.c3 < 10)))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where d3+1 >= 0 and (c3 > 1   or c3+1 < 10);
EXPLAIN
-> Filter: (((t1.d3 + 1) >= 0) and ((t1.c3 > 1) or ((t1.c3 + 1) < 10)))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where d3+1 >= 0 and (c3+1 > 1 or c3+1 < 10);
EXPLAIN
-> Filter: (((t1.d3 + 1) >= 0) and (((t1.c3 + 1) > 1) or ((t1.c3 + 1) < 10)))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where c3 > 1   and c3 < 10;
EXPLAIN
-> Table scan on t1, with pushed condition: ((t1.c3 > 1) and (t1.c3 < 10))  (rows=0.778)

explain select * from t1 where c3+1 > 1 and c3 < 10;
EXPLAIN
-> Filter: ((t1.c3 + 1) > 1)  (rows=2.33)
    -> Table scan on t1, with pushed condition: (t1.c3 < 10)  (rows=7)

explain select * from t1 where c3 > 1   and c3+1 < 10;
EXPLAIN
-> Filter: ((t1.c3 + 1) < 10)  (rows=2.33)
    -> Table scan on t1, with pushed condition: (t1.c3 > 1)  (rows=7)

explain select * from t1 where c3+1 > 1 and c3+1 < 10;
EXPLAIN
-> Filter: (((t1.c3 + 1) > 1) and ((t1.c3 + 1) < 10))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where (c3 > 1   and c3 < 10) or d3 >= 0;
EXPLAIN
-> Table scan on t1, with pushed condition: (((t1.c3 > 1) and (t1.c3 < 10)) or (t1.d3 >= 0))  (rows=2.85)

explain select * from t1 where (c3+1 > 1 and c3 < 10) or d3 >= 0;
EXPLAIN
-> Filter: ((((t1.c3 + 1) > 1) and (t1.c3 < 10)) or (t1.d3 >= 0))  (rows=3.89)
    -> Table scan on t1, with pushed condition: ((t1.c3 < 10) or (t1.d3 >= 0))  (rows=7)

explain select * from t1 where (c3 > 1   and c3+1 < 10) or d3 >= 0;
EXPLAIN
-> Filter: (((t1.c3 > 1) and ((t1.c3 + 1) < 10)) or (t1.d3 >= 0))  (rows=3.89)
    -> Table scan on t1, with pushed condition: ((t1.c3 > 1) or (t1.d3 >= 0))  (rows=7)

explain select * from t1 where (c3+1 > 1 and c3+1 < 10) or d3 >= 0;
EXPLAIN
-> Filter: ((((t1.c3 + 1) > 1) and ((t1.c3 + 1) < 10)) or (t1.d3 >= 0))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where (c3 > 1   and c3 < 10) or d3+1 >= 0;
EXPLAIN
-> Filter: (((t1.c3 > 1) and (t1.c3 < 10)) or ((t1.d3 + 1) >= 0))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where (c3+1 > 1 and c3 < 10) or d3+1 >= 0;
EXPLAIN
-> Filter: ((((t1.c3 + 1) > 1) and (t1.c3 < 10)) or ((t1.d3 + 1) >= 0))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where (c3 > 1   and c3+1 < 10) or d3+1 >= 0;
EXPLAIN
-> Filter: (((t1.c3 > 1) and ((t1.c3 + 1) < 10)) or ((t1.d3 + 1) >= 0))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where (c3+1 > 1 and c3+1 < 10) or d3+1 >= 0;
EXPLAIN
-> Filter: ((((t1.c3 + 1) > 1) and ((t1.c3 + 1) < 10)) or ((t1.d3 + 1) >= 0))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where d3 >= 0 or (c3 > 1   and c3 < 10);
EXPLAIN
-> Table scan on t1, with pushed condition: ((t1.d3 >= 0) or ((t1.c3 > 1) and (t1.c3 < 10)))  (rows=2.85)

explain select * from t1 where d3 >= 0 or (c3+1 > 1 and c3 < 10);
EXPLAIN
-> Filter: ((t1.d3 >= 0) or (((t1.c3 + 1) > 1) and (t1.c3 < 10)))  (rows=3.89)
    -> Table scan on t1, with pushed condition: ((t1.d3 >= 0) or (t1.c3 < 10))  (rows=7)

explain select * from t1 where d3 >= 0 or (c3 > 1   and c3+1 < 10);
EXPLAIN
-> Filter: ((t1.d3 >= 0) or ((t1.c3 > 1) and ((t1.c3 + 1) < 10)))  (rows=3.89)
    -> Table scan on t1, with pushed condition: ((t1.d3 >= 0) or (t1.c3 > 1))  (rows=7)

explain select * from t1 where d3 >= 0 or (c3+1 > 1 and c3+1 < 10);
EXPLAIN
-> Filter: ((t1.d3 >= 0) or (((t1.c3 + 1) > 1) and ((t1.c3 + 1) < 10)))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where d3+1 >= 0 or (c3 > 1   and c3 < 10);
EXPLAIN
-> Filter: (((t1.d3 + 1) >= 0) or ((t1.c3 > 1) and (t1.c3 < 10)))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where d3+1 >= 0 or (c3+1 > 1 and c3 < 10);
EXPLAIN
-> Filter: (((t1.d3 + 1) >= 0) or (((t1.c3 + 1) > 1) and (t1.c3 < 10)))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where d3+1 >= 0 or (c3 > 1   and c3+1 < 10);
EXPLAIN
-> Filter: (((t1.d3 + 1) >= 0) or ((t1.c3 > 1) and ((t1.c3 + 1) < 10)))  (rows=7)
    -> Table scan on t1  (rows=7)

explain select * from t1 where d3+1 >= 0 or (c3+1 > 1 and c3+1 < 10);
EXPLAIN
-> Filter: (((t1.d3 + 1) >= 0) or (((t1.c3 + 1) > 1) and ((t1.c3 + 1) < 10)))  (rows=7)
    -> Table scan on t1  (rows=7)

create index ix1 on t1(a3);
explain select * from t1 straight_join t1 as t2
where
(
t2.a3 = t1.a3
and t1.b3 = 1
and t1.c3 in (1,2,3)
and t2.b3 between 1 and 5
and t2.c3 > 1
)
or
(
t2.a3 = t1.a3
and t1.b3 = 2
and t1.c3 in (10,20,30)
and t2.b3 between 1 and 10
and t2.c3 > 2
)
or
(
t2.a3 = t1.a3
and t1.b3 = 3
and t1.c3 in (100,200,300)
and t2.b3 between 1 and 15
and t2.c3 > 3
)
;
EXPLAIN
-> Nested loop inner join  (rows=0.004)
    -> Table scan on t1, activating pushed join of 2 tables, with pushed condition: (((t1.c3 in (1,2,3)) and (t1.b3 = 1)) or ((t1.c3 in (10,20,30)) and (t1.b3 = 2)) or ((t1.c3 in (100,200,300)) and (t1.b3 = 3)))  (rows=0.611)
    -> Filter: (((t1.c3 in (1,2,3)) and (t2.b3 between 1 and 5) and (t2.c3 > 1) and (t1.b3 = 1)) or ((t1.c3 in (10,20,30)) and (t2.b3 between 1 and 10) and (t2.c3 > 2) and (t1.b3 = 2)) or ((t1.c3 in (100,200,300)) and (t2.b3 between 1 and 15) and (t2.c3 > 3) and (t1.b3 = 3)))  (rows=0.00654)
        -> Index lookup on t2 using ix1 (a3 = t1.a3), child of t1 in pushed join, with pushed condition: ((((t2.b3 between 1 and 5) and (t2.c3 > 1)) or ((t2.b3 between 1 and 10) and (t2.c3 > 2)) or ((t2.b3 between 1 and 15) and (t2.c3 > 3))) and (((t2.b3 between 1 and 5) and (t2.c3 > 1)) or ((t2.b3 between 1 and 10) and (t2.c3 > 2)) or ((t2.b3 between 1 and 15) and (t2.c3 > 3))))  (rows=0.7)

drop table t1;
#########################################################################
#
# Bug#34644930 NDB: Performance regression in TPC-H Q22
#
#########################################################################
create table t1 (
d decimal(6,2)
) engine = ndbcluster;
insert into t1 values (1.00), (1.00), (3.00);
explain format=tree
select * from t1
where d > (select avg(d) from t1);
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.d > (select #2))  (rows=1)
    -> Select #2 (subquery in pushed condition; run only once)
        -> Aggregate: avg(t1.d)  (rows=1)
            -> Table scan on t1  (rows=3)

SELECT variable_value into @read_cnt0
FROM performance_schema.global_status
WHERE variable_name = 'Ndb_api_read_row_count';
select * from t1
where d > (select avg(d) from t1);
d
3.00
# Expect 4 rows to have been read:
#   The 3 rows for calculating avg(d)
# + A single row from t1 with the pushed condition 'd > avg()'
SELECT variable_value-@read_cnt0
FROM performance_schema.global_status
WHERE variable_name = 'Ndb_api_read_row_count';
variable_value-@read_cnt0
4
drop table t1;
#
# Bug#29460314 NDB: INCORRECT JOIN RESULT WHEN EQ_REF IS
# COMBINED WITH PUSHED CONDITION
#
create table t1(a int not null, b int not null) engine=ndb;
insert into t1 values (1,0), (1,1), (1,2);
create table t2(pk int primary key, x int not null, y int not null) engine=ndb;
insert into t2 values (0,0,0), (1,1,1), (2,2,2);
create table t3(d int primary key) engine=ndb;
insert into t3 values (0), (1), (2);
Explain should verify that the condition 't2.x = t1.b' is pushed
explain
select straight_join * from t1
join t2 on t2.pk = t1.a+0 and t2.x = t1.b
join t3 on t3.d = t2.y;
EXPLAIN
-> Inner hash join (t3.d = t2.y)  (rows=0.3)
    -> Table scan on t3  (rows=3)
    -> Hash
        -> Inner hash join (t2.pk = (t1.a + 0)), (t2.x = t1.b)  (rows=0.3)
            -> Table scan on t2  (rows=3)
            -> Hash
                -> Table scan on t1  (rows=3)

Warnings:
Note	1003	Can't push table 't2' as child, 'type' must be a 'ref' access
Note	1003	Can't push table 't3' as child, 'type' must be a 'ref' access
select straight_join * from t1
join t2 on t2.pk = t1.a+0 and t2.x = t1.b
join t3 on t3.d = t2.y;
a	b	pk	x	y	d
1	1	1	1	1	1
drop table t1,t2,t3;
#
# Bug#29590017 ADD EXPLAIN OF PUSHED JOINS AND PUSHED CONDITIONS TO 'FORMAT=TREE'
#
create table t1 (
a int,
b int,
c int,
d int,
primary key(a,b)
) engine=ndbcluster;
insert into t1 values
(1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4),
(1,2,5,1), (1,3,1,2), (1,4,2,3),
(2,1,3,4), (2,3,4,5), (2,4,5,1),
(3,1,1,2), (3,2,2,3), (3,4,3,4),
(4,1,4,5), (4,2,5,1), (4,3,1,2);
explain format=tree
select * from t1 where b > 2;
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.b > 2)  (rows=5.33)

explain format=tree
select * from t1 where a > 2;
EXPLAIN
-> Index range scan (Multi-Range Read) on t1 using PRIMARY over (2 < a)  (rows=3)

explain format=tree
select * from t1 where a > 2 order by b;
EXPLAIN
-> Sort: t1.b  (rows=3)
    -> Index range scan (Multi-Range Read) on t1 using PRIMARY over (2 < a)  (rows=3)

explain format=tree
select * from t1 where a = 2 and c > 0;
EXPLAIN
-> Index lookup on t1 using PRIMARY (a = 2), with pushed condition: (t1.c > 0)  (rows=1)

explain format=tree
select * from t1 where a = 2 and c > 0 order by d;
EXPLAIN
-> Sort: t1.d  (rows=1)
    -> Index lookup on t1 using PRIMARY (a = 2), with pushed condition: (t1.c > 0)  (rows=1)

explain format=tree
select * from t1 where b > 0 order by a;
EXPLAIN
-> Index scan on t1 using PRIMARY, with pushed condition: (t1.b > 0)  (rows=5.33)

explain format=tree
select * from t1 where b > 0 order by a desc;
EXPLAIN
-> Index scan on t1 using PRIMARY (reverse), with pushed condition: (t1.b > 0)  (rows=5.33)

explain format=tree
select * from t1 join t1 as t2 on t2.a = t1.b and t2.c > 3;
EXPLAIN
-> Inner hash join (t2.a = t1.b)  (rows=8.53)
    -> Table scan on t1  (rows=16)
    -> Hash
        -> Table scan on t2, with pushed condition: (t2.c > 3)  (rows=5.33)

Warnings:
Note	1003	Can't push table 't1' as child, 'type' must be a 'ref' access
drop table t1;
#
# Bug#29595346 INCORRECT RESULT FROM SPECIFYING ORDER BY ON
#              A QUERY WITH PUSHED CONDITIONS
#
CREATE TABLE t1 (
col_int_unique INT DEFAULT NULL,
col_varchar_256 VARCHAR(256) DEFAULT NULL,
UNIQUE KEY ix1 (col_int_unique)
) ENGINE=ndbcluster;
INSERT INTO t1
VALUES (8,'wrong'), (27, 'got'), (12,'it'), (6,'right');
SELECT t1.col_varchar_256 AS field1
FROM t1 WHERE t1.col_int_unique <> 8
ORDER BY field1;
field1
got
it
right
EXPLAIN FORMAT=tree
SELECT t1.col_varchar_256 AS field1
FROM t1 WHERE t1.col_int_unique <> 8
ORDER BY field1;
EXPLAIN
-> Sort: t1.col_varchar_256  (rows=4)
    -> Table scan on t1, with pushed condition: (t1.col_int_unique <> 8)  (rows=4)

DROP TABLE t1;
#
# WL#13120 & WL#13121
#
Testing all combinations of pushing '<col1> <compare op> <col2>' conditions
CALL test_all("=");
CALL test_all("<>");
CALL test_all("<");
CALL test_all("<=");
CALL test_all(">");
CALL test_all(">=");
Test combinations using the 'variant' columns.
Even if the base type is the same for these conditions,
different precision, length, scale etc. should prevent pushing:
CALL test_query("SELECT k INTO @res FROM t1 WHERE string1 = string3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE string1 = string4",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE vstring1 = vstring3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE bin1 = bin3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE vbin1 = vbin3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE real_decimal1 = real_decimal3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE bits1 = bits3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE options1 = options3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE flags1 = flags3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE time_field1 = time_field3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE date_time1 = date_time3",false);
CALL test_query("SELECT k INTO @res FROM t1 WHERE time_stamp1 = time_stamp3",false);
Test that <col1> like <col2> is not pushed, - even if types are comparable
CALL test_query("SELECT count(*) INTO @res FROM t1 WHERE string1 LIKE string1",false);
CALL test_query("SELECT count(*) INTO @res FROM t1 WHERE string1 NOT LIKE string1",false);
CALL test_query("SELECT count(*) INTO @res FROM t1 WHERE string1 LIKE string2",false);
CALL test_query("SELECT count(*) INTO @res FROM t1 WHERE string1 NOT LIKE string2",false);
CALL test_query("SELECT count(*) INTO @res FROM t1 WHERE string1 LIKE string3",false);
CALL test_query("SELECT count(*) INTO @res FROM t1 WHERE string1 NOT LIKE string3",false);
#
# Bug#32924533 Conditions not pushed down to tables inside views and table-subqueries
#
create table t1 (
a int not null,
b int not null,
c int not null,
d int not null
) engine=ndbcluster;
insert into t1 values
(1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4),
(1,2,5,1), (1,3,1,2), (1,4,2,3),
(2,1,3,4), (2,3,4,5), (2,4,5,1),
(3,1,1,2), (3,2,2,3), (3,4,3,4),
(4,1,4,5), (4,2,5,1), (4,3,1,2);
create view v1(a,b,c,d) as
select a,b,c,d from t1;
explain format=tree
select * from v1
where v1.d < 5;
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.d < 5)  (rows=5.33)

explain format=tree
select * from v1
where v1.d < v1.c;
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.d < t1.c)  (rows=5.33)

explain format=tree
select * from t1,v1
where v1.d < 5;
EXPLAIN
-> Inner hash join (no condition)  (rows=85.3)
    -> Table scan on t1  (rows=16)
    -> Hash
        -> Table scan on t1, with pushed condition: (t1.d < 5)  (rows=5.33)

Warnings:
Note	1003	Can't push table 't1' as child, 'type' must be a 'ref' access
explain format=tree
select * from
(select a,b,c,d from t1) as v1(a,b,c,d)
where v1.d < 5;
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.d < 5)  (rows=5.33)

explain format=tree
select * from
(select a,b,c,d from t1) as v1(a,b,c,d)
where v1.d < v1.c;
EXPLAIN
-> Table scan on t1, with pushed condition: (t1.d < t1.c)  (rows=5.33)

explain format=tree
select * from t1,
(select a,b,c,d from t1) as v1(a,b,c,d)
where v1.d < 5;
EXPLAIN
-> Inner hash join (no condition)  (rows=85.3)
    -> Table scan on t1  (rows=16)
    -> Hash
        -> Table scan on t1, with pushed condition: (t1.d < 5)  (rows=5.33)

Warnings:
Note	1003	Can't push table 't1' as child, 'type' must be a 'ref' access
drop view v1;
drop table t1;
#########################################################
# WL#14388 Push condition referring fields from an
SPJ ancestor table
#########################################################
create table t1 (
a int,
b int,
c int,
d int,
primary key(a,b)
) engine=ndbcluster;
insert into t1 values
(1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4),
(1,2,5,1), (1,3,1,2), (1,4,2,3),
(2,1,3,4), (2,3,4,5), (2,4,5,1),
(3,1,1,2), (3,2,2,3), (3,4,3,4),
(4,1,4,5), (4,2,5,1), (4,3,1,2);
set optimizer_switch='block_nested_loop=off';
explain
select *
from t1
straight_join t1 as t2 on t2.d = t1.d
straight_join t1 as t3 on t3.a = t2.a
where t3.c >= t1.c and t3.c <= t2.c;
EXPLAIN
-> Inner hash join (t3.a = t2.a), extra conditions: (t3.c >= t1.c) and (t3.c <= t2.c)  (rows=4.55)
    -> Table scan on t3  (rows=16)
    -> Hash
        -> Inner hash join (t2.d = t1.d)  (rows=25.6)
            -> Table scan on t2  (rows=16)
            -> Hash
                -> Table scan on t1  (rows=16)

Warnings:
Note	1003	Can't push table 't2' as child, 'type' must be a 'ref' access
Note	1003	Can't push table 't3' as child, 'type' must be a 'ref' access
drop table t1;
set explain_format=default;
